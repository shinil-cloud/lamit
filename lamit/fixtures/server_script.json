[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-03-23 10:53:53.636796",
  "module": null,
  "name": "employee",
  "reference_doctype": "Employee",
  "script": "t1=doc.email_id\nt2=doc.role_profile\nt3=doc.module_profile\n\n\n# if not frappe.db.exists(\"EMP ID\", doc.employee_number):\n\n#     doc2=frappe.get_doc({\n#         \"doctype\": \"EMP ID\",\n#         \"id\":doc.employee_number\n#     })\n#     doc2.insert()\n    \n    # doc.id=doc.employee_number\n\n# doc.employee_permission=doc.employee_number\n\nif not frappe.db.exists(\"User\", doc.email_id):\n    if doc.last_name:\n        name1=doc.first_name+\" \"+doc.last_name\n    else:\n        name1=doc.first_name\n        \n    doc1=frappe.get_doc({\n            \"doctype\": \"User\",\n            \"email\": doc.email_id,\n            \"first_name\":doc.first_name,\n            # \"last_name\":doc.last_name,\n            \"fullname1\":name1,\n            \"first_name1\":doc.first_name,\n            \"last_name1\":doc.last_name,\n            \"user_id\":doc.employee_number,\n                                                                       \n            \"role_profile_name\":doc.role_profile,\n            \"module_profile\" :doc.module_profile,\n                                               \n            \"designation\":doc.designation,\n                                                                            \n            \"user_type\":\"System User\",\n            \"user_image\":doc.image,\n            # \"emp_id\":doc.employee_number,\n    })\n    doc1.insert()\n    doc.user_id=doc.email_id\nelse:\n    doc.user_id=doc.email_id\n    \n\n# if not frappe.db.exists(\"Employee Permission\", doc.employee_number):    \n#     doc5=frappe.get_doc({\"doctype\":\"Employee Permission\",\"employee\":doc.employee_number})\n#     doc5.insert()\n\n# if not frappe.db.exists(\"Heads Permission\", doc.employee_number): \n#     doc6=frappe.get_doc({\"doctype\":\"Heads Permission\",\"employee\":doc.employee_number})\n#     doc6.insert()\n    \n# if (doc.designation!=\"Executive Director\" or doc.designation!=\"Sales Manager\" or doc.designation!=\"HR Manager\" or doc.designation!=\"HR User\" or doc.designation!=\"Sales Admin\"):\n#     # To get permmission to employee only to employee salary related doc\n#     doc7=frappe.get_doc\n#     ({\n#         \"doctype\":\"User Permission\",\n#         \"user\":doc.email_id,\n#         \"reference_doctype\":\"Employee Permission\",\n#         \"for_value\":doc.employee_number,\n#         \"apply_to_all_doctypes\":1\n#     })\n#     doc7.insert()\n    \n#     # To get permmission to attendance related doc\n#     doc8=frappe.get_doc\n#     ({\n#         \"doctype\":\"User Permission\",\n#         \"user\":doc.email_id,\n#         \"reference_doctype\":\"Heads Permission\",\n#         \"for_value\":doc.employee_number,\n#         \"apply_to_all_doctypes\":1\n#     })\n#     doc8.insert()\n    \n#     #To give permission to heads\n    \n#     if not doc.reports_to1:\n#         doc.reports_to1=doc.reports_to\n#         doc.report_to1_email=doc.leave_approver\n#         doc9=frappe.get_doc\n#         ({\n#             \"doctype\":\"User Permission\",\n#             \"user\":doc.leave_approver,\n#             \"reference_doctype\":\"Heads Permission\",\n#             \"for_value\":doc.employee_number,\n#             \"apply_to_all_doctypes\":1\n#         })\n#         doc9.insert()\n#     else:\n#         if doc.reports_to !=doc.reports_to1:\n\n#             for t in frappe.db.get_list('User Permission',filters={'user':doc.report_to1_email,'reference_doctype':\"Heads Permission\",\"for_value\":doc.employee_number}):\n#                 if t:\n#                     frappe.delete_doc('User Permission',t.name)\n            \n#             if doc.reports_to:\n#                 doc9=frappe.get_doc\n#                 ({\n#                     \"doctype\":\"User Permission\",\n#                     \"user\":doc.leave_approver,\n#                     \"reference_doctype\":\"Heads Permission\",\n#                     \"for_value\":doc.employee_number,\n#                     \"apply_to_all_doctypes\":1\n#                 })\n#                 doc9.insert()\n            \n#             doc.reports_to1=doc.reports_to\n#             doc.report_to1_email=doc.leave_approver\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n       \n\n\n   \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "update_area_sales_manager",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:03:11.460633",
  "module": null,
  "name": "update_area_sales_manager",
  "reference_doctype": null,
  "script": "\ncompany=frappe.form_dict.company\n# area_sales_manager1=frappe.form_dict.area_sales_manager1\n# area_sales_manager_name1=frappe.form_dict.area_sales_manager_name1\n# area_sales_manager_email1=frappe.form_dict.area_sales_manager_email1\n\narea_sales_manager2=frappe.form_dict.area_sales_manager2\narea_sales_manager_name2=frappe.form_dict.area_sales_manager_name2\narea_sales_manager_email2=frappe.form_dict.area_sales_manager_email2\n\n\n\nfor t in frappe.db.get_list('Assign Sale Area',filters={'company':company},fields={'name'}):\n    for x in frappe.db.get_list('User Permission',filters={'for_value':company,'for_value':t.name},fields={'user','name'}):\n        frappe.delete_doc(\"User Permission\",x.name)\n   \nfor t in frappe.db.get_list('Assign Sale Area',filters={'company':company},fields={'name'}):\n        doc1= frappe.get_doc({'doctype':'User Permission'})\n        doc1.user=area_sales_manager_email2\n        doc1.allow=\"Assign Sale Area\"\n        doc1.for_value=t.name\n        doc1.employee_name=\"Area Sales Manager\"\n        doc1.insert()\n\nfor t in frappe.db.get_list('Assign Sale Area',filters={'company':company},fields={'name'}):\n        doc_assign_sale_area=frappe.get_doc('Assign Sale Area',t.name)\n        doc_assign_sale_area.area_sales_manager=area_sales_manager2\n        doc_assign_sale_area.area_sales_manager_name=area_sales_manager_name2\n        doc_assign_sale_area.area_sales_manager_email=area_sales_manager_email2\n        doc_assign_sale_area.save()\n    \n    \n    \n    \n    \n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "update_sales_admin",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-05-15 12:50:46.409231",
  "module": null,
  "name": "update Sales Admin",
  "reference_doctype": "Company",
  "script": "\ncompany1=frappe.form_dict.company1\nemail_id1=frappe.form_dict.email_id1\nemployee_name1=frappe.form_dict.employee_name1\nemployee_number1=frappe.form_dict.employee_number1\n\n\nfor t in frappe.db.get_list('User Permission',filters={'for_value':company1,'user_designation':\"Sales Admin\"},fields={'user','name'}):\n    if t.user != email_id1:\n        frappe.delete_doc(\"User Permission\",t.name)\n\nfor t in frappe.db.get_list('Assign Sale Area',filters={'company':company1}):\n    doc_assign_sale_area=frappe.get_doc('Assign Sale Area',t.name)\n    doc_assign_sale_area.sales_admin=employee_number1\n    doc_assign_sale_area.sales_admin_name=employee_name1\n    doc_assign_sale_area.sales_admin_email=email_id1\n    doc_assign_sale_area.save()\n    \n\n\n\n\n\n# for t in frappe.db.get_list('Assign Sale Area',filters={'company':doc.name}):\n#     doc_assign_sale_area=frappe.get_doc('Assign Sale Area',t.name)\n#     # doc_assign_sale_area.sales_admin=employee_number1\n#     # doc_assign_sale_area.sales_admin_name=employee_name1\n#     # doc_assign_sale_area.sales_admin_email=email_id1\n#     doc_assign_sale_area.save()",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "event_frequency": "All",
  "modified": "2023-03-23 11:04:52.400702",
  "module": null,
  "name": "Quotation- Before Cancel",
  "reference_doctype": "Quotation",
  "script": "doc.status1=\"Cancelled\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:05:49.183368",
  "module": null,
  "name": "Quotation- before submit",
  "reference_doctype": "Quotation",
  "script": "doc.status1=\"Approved\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "release_incentive",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-04-18 10:49:22.119850",
  "module": null,
  "name": "Target List- Release incentive",
  "reference_doctype": null,
  "script": "# employee=frappe.form_dict.employee\n\n# for t in frappe.db.get_list('Incentive',filters={'last_released':1,'employee':employee}):\n#     if t:\n#         frappe.db.set_value('Incentive',t.name,{'last_released':0})\n\n# for t in frappe.db.get_list('Incentive',filters={'active':1,'release_incentive':0,'last_released':0,'employee':employee}):\n#     if t:\n#         frappe.db.set_value('Incentive',t.name,{'active':1,'release_incentive':1,'last_released':1,'cumulative_incentive':1})\n\n\n\n\n\nemployee=frappe.form_dict.employee\n\nfor t in frappe.db.get_list('Incentive',filters={'last_released':1,'employee':employee}):\n    if t:\n        frappe.db.set_value('Incentive',t.name,{'last_released':0})\n\nfor t in frappe.db.get_list('Incentive',filters={'active':1,'release_incentive':0,'last_released':0,'employee':employee}):\n    if t:\n        # frappe.db.set_value('Incentive',t.name,{'active':1,'release_incentive':1,'last_released':1,'cumulative_incentive':1})\n        e_account=frappe.db.get_value('Incentive',t.name,'incentive_payable')\n        e_party=frappe.db.get_value('Incentive',t.name,'employee')\n        e_incentive=frappe.db.get_value('Incentive',t.name,'incentive_amount')\n        \n        if e_account:\n            doc1= frappe.get_doc({'doctype':'Journal Entry',\n                \"accounts\":[\n                    {\n                        # \"account\":e_account+\" - LM\",\n                        \"account\":e_account+\" - LR\",\n                        \"party_type\":\"Employee\",\n                        \"party\":e_party,\n                        # \"cost_center\":\"Main - LM\",\n                        # \"cost_center\":\"Lamit - LR\",\n                        \"cost_center\":\"Main - LR\",\n                        \"debit_in_account_currency\":0,\n                        \"credit_in_account_currency\":e_incentive\n                    },\n                    {\n                        # \"account\":\"Incentive - LM\",\n                        # \"account\":\"Incentive - LR\",\n                        \"account\":\"Incentive - LR\",\n                        \"debit_in_account_currency\":e_incentive,\n                        \"credit_in_account_currency\":0,\n                        # \"cost_center\":\"Main - LM\",\n                        # \"cost_center\":\"Lamit - LR\",\n                        \"cost_center\":\"Main - LR\",\n                    },\n                    \n                    ]\n            })\n            doc1.docstatus=1\n            doc1.voucher_type=\"Journal Entry\"\n            doc1.company=\"Lamit\"\n            doc1.posting_date=frappe.utils.nowdate()\n            doc1.total_depit=e_incentive\n            doc1.total_credit=e_incentive\n            doc1.insert()\n    \n            frappe.db.set_value('Incentive',t.name,{'release_incentive':1,'last_released':1,'cumulative_incentive':1,\"journal_entry\":doc1.name})\n            \n\n\n\n\n\n\n\n# for t in frappe.db.get_list('Incentive',filters={'release_incentive':1,'last_released':1,'employee':employee}):\n#     if t:\n#         frappe.db.set_value('Incentive',t.name,{'active':0,'last_released':0})\n\n# for t in frappe.db.get_list('Incentive',filters={'active':1,'release_incentive':0,'last_released':0,'employee':employee}):\n#     if t:\n#         frappe.db.set_value('Incentive',t.name,{'active':1,'release_incentive':1,'last_released':1,'cumulative_incentive':1})",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:09:12.297873",
  "module": null,
  "name": "Customer address-Before Save",
  "reference_doctype": "Customer",
  "script": "doc1 = frappe.get_doc('Lead',doc.lead_name)\ndoc.address_line1=doc1.address_line1",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:09:58.910287",
  "module": null,
  "name": "address_name_change",
  "reference_doctype": "Address",
  "script": "doc.name=doc.address_title",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "meeting_updates_customer",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:11:13.025609",
  "module": null,
  "name": "Meeting Updates Customer",
  "reference_doctype": null,
  "script": "x = frappe.get_doc('Customer',frappe.form_dict.select_customer)\nx.append(\"follow_up\", \n{\n        \"notes\":frappe.form_dict.note,\n        \"task_status\":frappe.form_dict.status1,\n        \"contact_date\":frappe.form_dict.due_date1,\n        \"name1\":frappe.form_dict.assign1,\n        \"fromtime\":frappe.form_dict.from_time1,\n        \"totime\":frappe.form_dict.to_time1,\n})\nx.save()\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "update_salearea",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:12:11.846345",
  "module": null,
  "name": "Update Sale Area",
  "reference_doctype": null,
  "script": "print(\"hhhhhhhhhhhhhhhhhhhhhhhhhhhhh\")\nfor i in frappe.form_dict.t:\n    frappe.db.set_value(\"Sale Area\",i,{\"area_sales_manager\":frappe.form_dict.sm,\"area_sales_manager_name\":frappe.form_dict.sm_name})",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-03-23 11:13:05.130349",
  "module": null,
  "name": "create engineer",
  "reference_doctype": "Lead",
  "script": "\n\n\n# if not frappe.db.exists(\"Engineer\", doc.lead_name):\n#     if(doc.lead_category==\"Engineer / Architects\"):\n        \n    \n   \n        \n#         doc = frappe.get_doc({\n#                 'doctype': 'Engineer',\n                \n#                 \"name1\":doc.lead_name,\n                \n                \n               \n#             })\n#     doc.insert()\n    \n\nif not frappe.db.exists(\"Contractor\", doc.lead_name):\n    if(doc.lead_category==\"Contractor / Truss Workers\"):\n            \n        \n       \n            \n            doc = frappe.get_doc({\n                    'doctype': 'Contractor',\n                    \n                    \"name1\":doc.lead_name,\n                    \n                    \n                   \n                })\n    doc.insert()\n    \n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "update_asm",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:13:51.262426",
  "module": null,
  "name": "Employee-update asm",
  "reference_doctype": null,
  "script": "# frappe.msgprint(\"work_for_company_exist\"+str(frappe.form_dict.work_for_company_exist))\n# frappe.msgprint(\"work_for_company_new\"+str(frappe.form_dict.work_for_company_new))\nfrappe.msgprint(\"uuuuuu\"+str())\nfor i in (frappe.form_dict.work_for_company_exist).split(\",\",\"[\",\"]\"):\n    # new_company.push(i)\n    frappe.msgprint(\"sssss  \"+i)\n\n\n\n\n\n# if(len(frappe.form_dict.work_for_company_exist)>0):\n#     for i in str(frappe.form_dict.work_for_company_exist):\n#         new_company.push(i)\n# else:\n#     new_company=[]\n    \n# if(len(frappe.form_dict.work_for_company_new)>0):\n#     for i in str(frappe.form_dict.work_for_company_new):\n#         exist_company.push(i)\n# else:\n#     exist_company=[]\n\n# frappe.msgprint(\"uuuuuu\")\n# frappe.msgprint(\"sssss\")\n\n\n\n# if([len(exist_company)>0] and [len(new_company)>0]):\n#     for n in new_company:\n#         if not (exist_company).includes(n):\n#             frappe.msgprint(str(n))\n            \n            \n    #         for sale_area in frappe.db.get_list('Sale Area',filters={'company':new_company}):\n    #             frappe.db.set_value(\"Sale Area\",sale_area.name,{\"area_sales_manager\":frappe.form_dict.s_employee,\"area_sales_manager_name\":frappe.form_dict.s_emp_name,\"area_sales_manager_email\":frappe.form_dict.s_email})\n    \n    \n    \n    # for exist_company in frappe.form_dict.work_for_company_exist:\n    #     if not (new_company).includes(exist_company):\n    #         for sale_area in frappe.db.get_list('Sale Area',filters={'company':exist_company}):\n    #             frappe.db.set_value(\"Sale Area\",sale_area.name,{\"area_sales_manager\":\" \",\"area_sales_manager_name\":\" \",\"area_sales_manager_email\":\" \"})\n\n# elif(len(frappe.form_dict.work_for_company_exist)==0 and len(frappe.form_dict.work_for_company_new)>0):\n#     for new_company in frappe.form_dict.work_for_company_new:\n#             for sale_area in frappe.db.get_list('Sale Area',filters={'company':new_company}):\n#                 frappe.db.set_value(\"Sale Area\",sale_area.name,{\"area_sales_manager\":frappe.form_dict.s_employee,\"area_sales_manager_name\":frappe.form_dict.s_emp_name,\"area_sales_manager_email\":frappe.form_dict.s_email})\n    \n# elif(len(frappe.form_dict.work_for_company_exist)>0 and len(frappe.form_dict.work_for_company_new)==0):\n#     for exist_company in frappe.form_dict.work_for_company_exist:\n#             for sale_area in frappe.db.get_list('Sale Area',filters={'company':exist_company}):\n#                 frappe.db.set_value(\"Sale Area\",sale_area.name,{\"area_sales_manager\":\" \",\"area_sales_manager_name\":\" \",\"area_sales_manager_email\":\" \"})\n    \n\n\n\n\n\n\n\n\n\n\n\n\n# doc1 = frappe.get_doc(\"Lead\",frappe.form_dict.docname)\n# doc1.sale_area =doc1.lac\n# doc1.save(ignore_permissions=True)\n#     try:\n#         frappe.flags.mute_messages = False\n#         # sys.exc_clear()\n#     except Exception as e:\n#         pass\n#     finally:\n#         frappe.flags.mute_messages =False\n# test_2()\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "update_sale_area",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:14:30.533081",
  "module": null,
  "name": "Lead-Update Sale Area",
  "reference_doctype": null,
  "script": "def test_2():\n    # frappe.flags.mute_messages = True\n    doc1 = frappe.get_doc(\"Lead\",frappe.form_dict.docname)\n    doc1.sale_area =doc1.lac\n    doc1.save(ignore_permissions=True)\n    try:\n        frappe.flags.mute_messages = False\n        # sys.exc_clear()\n    except Exception as e:\n        pass\n    finally:\n        frappe.flags.mute_messages =False\ntest_2()\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save (Submitted Document)",
  "event_frequency": "All",
  "modified": "2023-03-23 11:16:36.300723",
  "module": null,
  "name": "lost quotation",
  "reference_doctype": "Quotation",
  "script": "frappe.db.set_value(\"Lead\",doc.party_name,\"status\", \"Lost\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-05-15 11:17:09.584116",
  "module": null,
  "name": "Change Sale Area",
  "reference_doctype": "Payment Entry",
  "script": "for x in doc.get(\"references\"):\n    if x.reference_doctype==\"Sales Invoice\":\n        y= frappe.get_doc(\"Sales Invoice\",x.reference_name)\n        if (y.docstatus==1)and(y.status==\"Paid\"):\n            z=frappe.get_doc(\"Customer\",y.customer)\n            if z.customer_area!=z.sale_area:\n                z.change_sale_area=0\n                z.sale_district=z.district\n                z.sale_area=z.customer_area\n                # frappe.msgprint(str(z.customer_area))\n                z.save()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-05-02 15:00:46.290346",
  "module": null,
  "name": "Task Overdue Date",
  "reference_doctype": "Task",
  "script": "# if not doc.overdue_date:\ndue_date=doc.due_date\nfulldate=frappe.utils.add_days(due_date,+1)\noverdue=str(fulldate).split(\" \")[0]\ndoc.overdue_date=overdue",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2023-05-02 17:13:38.442040",
  "module": null,
  "name": "Task Overdue Reminder",
  "reference_doctype": null,
  "script": "today=frappe.utils.nowdate()\ntoday_time=frappe.utils.nowtime()\ntoday_hour=today_time.split(\".\")[0].split(\":\")[0]\ntoday_minute=today_time.split(\".\")[0].split(\":\")[1]\n\nfor task in frappe.db.get_list('Task',filters={'status':\"Open\",'overdue_date':today}):\n    if task:\n        \n        reference=frappe.db.get_value('Task',task.name,'name')\n        select_lead=frappe.db.get_value('Task',task.name,'select_lead')\n        \n        if select_lead==\"Lead\":\n            location=frappe.db.get_value('Task',task.name,'lead_location')\n        else:\n            location=frappe.db.get_value('Task',task.name,'customer_locations')\n            \n        \n        customer_name=frappe.db.get_value('Task',task.name,'customer_name')\n        contact_date=frappe.db.get_value('Task',task.name,'due_date')\n        # contact_time=frappe.db.get_value('Task',task.name,'contact_time')\n        \n        \n        contact_time_in_hour=frappe.db.get_value('Task',task.name,'contact_time_in_hour')\n        contact_time_in_min=frappe.db.get_value('Task',task.name,'contact_time_in_min')\n        time2=frappe.db.get_value('Task',task.name,'time2')\n        contact_time=contact_time_in_hour+\" : \"+contact_time_in_min+\" \"+time2\n        \n        \n        assigned_to=frappe.db.get_value('Task',task.name,'assign')\n        \n        employee_email=frappe.db.get_value('Task',task.name,'assigned_to1')\n        # employee_designation=frappe.db.get_value('Task',task.name,'designation')\n        \n        marketing_officer=frappe.db.get_value('Task',task.name,'marketing_officer')\n        sales_officer=frappe.db.get_value('Task',task.name,'sales_officer')\n\n        if marketing_officer:\n            employee_designation=\"Marketing Officer\"\n            employee_name=frappe.db.get_value('Task',task.name,'marketing_officer')\n        elif sales_officer:\n            employee_designation=\"Sales Officer\"\n            employee_name=frappe.db.get_value('Task',task.name,'sales_officer')\n        \n        # if employee_designation==\"Sales Officer\":\n        #     marketing_officer=frappe.db.get_value('Customer Area',{\"allocated_by\":assigned_to},'marketing_officer')\n        #     marketing_officer_name=frappe.db.get_value('Customer Area',{\"allocated_by\":assigned_to},'marketing_officer_name')\n        #     marketing_officer_email=frappe.db.get_value('Customer Area',{\"allocated_by\":assigned_to},'marketing_officer_email')\n        # elif employee_designation==\"Marketing Officer\":\n        #     marketing_supervisor=frappe.db.get_value('Company',{\"name\":\"Lamit\"},'marketing_supervisor')\n        #     marketing_supervisor_name=frappe.db.get_value('Company',{\"name\":\"Lamit\"},'marketing_supervisor_name')\n        #     marketing_supervisor_email=frappe.db.get_value('Company',{\"name\":\"Lamit\"},'marketing_supervisor_email')\n        \n        \n       \n        \n        if employee_designation==\"Sales Officer\":\n            asm=frappe.db.get_value('Assign Sale Area',{\"name\":location},'area_sales_manager')\n            asm_name=frappe.db.get_value('Assign Sale Area',{\"name\":location},'area_sales_manager_name')\n            asm_email=frappe.db.get_value('Assign Sale Area',{\"name\":location},'area_sales_manager_email')\n\n        elif employee_designation==\"Marketing Officer\":\n            marketing_supervisor=frappe.db.get_value('Company',{\"name\":\"Lamit\"},'marketing_supervisor')\n            marketing_supervisor_name=frappe.db.get_value('Company',{\"name\":\"Lamit\"},'marketing_supervisor_name')\n            marketing_supervisor_email=frappe.db.get_value('Company',{\"name\":\"Lamit\"},'marketing_supervisor_email')\n            \n\n        doc1= frappe.get_doc({'doctype':'Task Overdue Reminder'})\n        doc1.reference=reference\n        doc1.customer_name=customer_name\n        doc1.contact_date=contact_date\n        doc1.contact_time=contact_time\n        doc1.assigned_to=assigned_to\n        doc1.employee_name=employee_name\n        doc1.employee_email=employee_email\n        doc1.customer_type=select_lead\n        doc1.employee_designation=employee_designation\n        if employee_designation==\"Sales Officer\": \n            doc1.head_id=asm\n            doc1.head_name=asm_name\n            doc1.head_email=asm_email\n        elif employee_designation==\"Marketing Officer\":\n            doc1.head_id=marketing_supervisor\n            doc1.head_name=marketing_supervisor_name\n            doc1.head_email=marketing_supervisor_email\n        elif employee_designation==\"Customer Care Executive\":\n            doc1.head_id=marketing_supervisor\n            doc1.head_name=marketing_supervisor_name\n            doc1.head_email=marketing_supervisor_email\n        doc1.insert()\n                        \n        # today1=frappe.utils.now()\n        # new_reminder=frappe.utils.add_days(today1,+1)\n        # new_reminder_date=str(new_reminder).split(\" \")[0]\n        # new_reminder_time= time=str(new_reminder).split(\" \")[1].split(\".\")[0].split(\":\")[0]+\":\"+str(new_reminder).split(\" \")[1].split(\".\")[0].split(\":\")[1]\n    \n        frappe.db.set_value('Task',task.name,{'status':\"Overdue\",\"overdue\":1})\n            \n",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": "delete_user_permission",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:20:27.992970",
  "module": null,
  "name": "delete user permission",
  "reference_doctype": null,
  "script": "frappe.delete_doc(\"User Permission\",frappe.form_dict.name)\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2023-03-23 11:21:06.453391",
  "module": null,
  "name": "Sales Order- Payment Reminder",
  "reference_doctype": null,
  "script": "today=frappe.utils.nowdate()\ntoday_time=frappe.utils.nowtime()\ntoday_hour=today_time.split(\".\")[0].split(\":\")[0]\ntoday_minute=today_time.split(\".\")[0].split(\":\")[1]\n\nfor order in frappe.db.get_list('Sales Order',filters={'advance_received':0,'reminderdate':today}):\n    if order:\n        s_time=frappe.db.get_value('Sales Order',order.name,'remindertime')\n        d_hour=s_time.split(\":\")[0]\n        d_minutes=s_time.split(\":\")[1]\n        \n        \n        s_name=frappe.db.get_value('Sales Order',order.name,'name')\n        s_customer=frappe.db.get_value('Sales Order',order.name,'customer')\n        s_sales_executive=frappe.db.get_value('Sales Order',order.name,'sales_executive')\n        # s_sales_executive_email=frappe.db.get_value('Sales Order',order.name,'sales_executive_email')\n        s_sales_admin=frappe.db.get_value('Sales Order',order.name,'sales_admin')\n        s_sales_admin_email=frappe.db.get_value('Sales Order',order.name,'sales_admin_email')\n        # s_amount=frappe.db.get_value('Sales Order',order.name,'outstanding_amount')\n        \n        s_reminder_date=frappe.db.get_value('Sales Order',order.name,'reminderdate')\n        s_reminder_time=frappe.db.get_value('Sales Order',order.name,'remindertime')\n        \n        \n\n        if int(today_hour)==int(d_hour):\n            if int(today_minute)>int(d_minutes):\n                \n                # if int(s_amount)>0:\n                doc_parent= frappe.get_doc({'doctype':'Payment Reminder'})\n                doc_parent.doc_name=\"Sales Order\"\n                doc_parent.reference_id=s_name\n                doc_parent.customer=s_customer\n                doc_parent.sales_executive=s_sales_executive\n                # doc_parent.sales_executive_email=s_sales_executive_email\n                doc_parent.sales_admin=s_sales_admin\n                doc_parent.sales_admin_email=s_sales_admin_email\n                # doc_parent.amount=s_amount\n                doc_parent.insert()\n                        \n                today1=frappe.utils.now()\n                new_reminder=frappe.utils.add_days(today1,+1)\n                new_reminder_date=str(new_reminder).split(\" \")[0]\n                new_reminder_time= time=str(new_reminder).split(\" \")[1].split(\".\")[0].split(\":\")[0]+\":\"+str(new_reminder).split(\" \")[1].split(\".\")[0].split(\":\")[1]\n    \n                frappe.db.set_value('Sales Order',order.name,{'reminderdate':new_reminder_date,\"remindertime\":new_reminder_time})\n            \n",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-03-23 11:22:55.223129",
  "module": null,
  "name": "Sales Order - Advance Received",
  "reference_doctype": "Payment Entry",
  "script": "for t in doc.get(\"references\"):\n    if t.reference_doctype==\"Sales Order\":\n        percentage_received=(float(t.allocated_amount)/float(t.total_amount))*100\n        if(int(percentage_received)>30):\n            frappe.db.set_value(\"Sales Order\",t.reference_name,\"advance_received\",1)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-03-23 11:23:59.795965",
  "module": null,
  "name": "Sales Invoice- Total sale calculation(incentive)",
  "reference_doctype": "Sales Invoice",
  "script": "total=0\nsubtotal=0\nfor item in doc.get(\"items\"):\n    if item.item_group==\"Premium Products\":\n        subtotal=float(item.amount)*float(item.incentive)\n        total=float(total)+float(subtotal)\n    elif item.item_group==\"Secondary Products\":\n        subtotal=float(item.amount)*float(item.incentive)\n        total=float(total)+float(subtotal)\n    else:\n        subtotal=float(item.amount)\n        total=float(total)+float(subtotal)\ndoc.total_sale_based_on_incentive=total\n        \n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2023-03-23 11:24:33.210991",
  "module": null,
  "name": "Sales Executive Payment Reminder",
  "reference_doctype": null,
  "script": "today=frappe.utils.nowdate()\ntoday_time=frappe.utils.nowtime()\ntoday_hour=today_time.split(\".\")[0].split(\":\")[0]\ntoday_minute=today_time.split(\".\")[0].split(\":\")[1]\n\n# for invoice in frappe.db.get_list('Sales Invoice',filters={'status':{'Overdue','Unpaid','Partly Paid'},'reminder_date':today}):\nfor invoice in frappe.db.get_list('Sales Invoice',filters={'status':{'Draft','Overdue','Unpaid','Partly Paid'},'reminder_date':today}):\n    if invoice:\n        s_time=frappe.db.get_value('Sales Invoice',invoice.name,'reminder_time')\n        d_hour=s_time.split(\":\")[0]\n        d_minutes=s_time.split(\":\")[1]\n        \n        \n        s_name=frappe.db.get_value('Sales Invoice',invoice.name,'name')\n        s_customer=frappe.db.get_value('Sales Invoice',invoice.name,'customer')\n        s_sales_executive=frappe.db.get_value('Sales Invoice',invoice.name,'sales_executive')\n        s_sales_executive_email=frappe.db.get_value('Sales Invoice',invoice.name,'sales_executive_email')\n        # s_sales_executive_email=frappe.db.get_value('Sales Invoice',invoice.name,'sales_executive_email')\n        s_sales_admin=frappe.db.get_value('Sales Invoice',invoice.name,'sales_admin')\n        s_sales_admin_email=frappe.db.get_value('Sales Invoice',invoice.name,'sales_admin_email')\n        s_amount=frappe.db.get_value('Sales Invoice',invoice.name,'outstanding_amount')\n        \n        s_reminder_date=frappe.db.get_value('Sales Invoice',invoice.name,'reminder_date')\n        s_reminder_time=frappe.db.get_value('Sales Invoice',invoice.name,'reminder_time')\n        \n        \n\n        if int(today_hour)==int(d_hour):\n            if int(today_minute)>int(d_minutes):\n                \n                if int(s_amount)>0:\n                    doc_parent= frappe.get_doc({'doctype':'Payment Reminder'})\n                    doc_parent.doc_name=\"Sales Invoice\"\n                    doc_parent.reference_id=s_name\n                    doc_parent.customer=s_customer\n                    doc_parent.sales_executive=s_sales_executive\n                    doc_parent.sales_executive_email=s_sales_executive_email\n                    doc_parent.sales_admin=s_sales_admin\n                    doc_parent.sales_admin_email=s_sales_admin_email\n                    doc_parent.amount=s_amount\n                    doc_parent.insert()\n                        \n                    today1=frappe.utils.now()\n                    new_reminder=frappe.utils.add_days(today1,+1)\n                    new_reminder_date=str(new_reminder).split(\" \")[0]\n                    new_reminder_time= time=str(new_reminder).split(\" \")[1].split(\".\")[0].split(\":\")[0]+\":\"+str(new_reminder).split(\" \")[1].split(\".\")[0].split(\":\")[1]\n    \n                    frappe.db.set_value('Sales Invoice',invoice.name,{'reminder_date':new_reminder_date,\"reminder_time\":new_reminder_time})\n            \n",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-03-23 11:25:19.518912",
  "module": null,
  "name": "Sales Invoice reminder date",
  "reference_doctype": "Sales Invoice",
  "script": "if not doc.reminder_date:\n    created_date=doc.created_date\n    fulldate=frappe.utils.add_days(created_date,+1)\n    date=str(fulldate).split(\" \")[0]\n    time=str(fulldate).split(\" \")[1].split(\".\")[0].split(\":\")[0]+\":\"+str(fulldate).split(\" \")[1].split(\".\")[0].split(\":\")[1]\n    \n    doc.reminder_date=date\n    doc.reminder_time=time",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "incentive_two_slab",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:26:02.186242",
  "module": null,
  "name": "Incentive Second Slab",
  "reference_doctype": null,
  "script": "i=0\nx = frappe.get_doc('Incentive',frappe.form_dict.incentive_doc)\n\nbad_chars = ['[', ']', ',','\"']\n\n# first slab insert\nfirst_slab1=frappe.form_dict.first_slab\nfirst_incentive1=frappe.form_dict.first_incentive\n\nfor z in bad_chars:\n    first_slab1 = first_slab1.replace(z,'')\n    \nfor z in bad_chars:\n    first_incentive1 = first_incentive1.replace(z,'')\n\nfor y in first_slab1.split(\"/\"):\n    i=int(i)+1\n\nfor y in range(0,int(i)-1):\n    x.append(\"first_slab\", \n    {\n            \"slab\":first_slab1.split(\"/\")[y],\n            \"incentive\":first_incentive1.split(\"/\")[y],\n    })\n    x.save()\n\n\n# second slab insert\nsenond_slab1=frappe.form_dict.second_slab\nsenond_incentive1=frappe.form_dict.second_incentive\n\nfor z in bad_chars:\n    senond_slab1 = senond_slab1.replace(z,'')\n    \nfor z in bad_chars:\n    senond_incentive1 = senond_incentive1.replace(z,'')\ni=0\nfor y in senond_slab1.split(\"/\"):\n    i=int(i)+1\n\nfor y in range(0,int(i)-1):\n    x.append(\"second_slab\", \n    {\n            \"slab\":senond_slab1.split(\"/\")[y],\n            \"incentive\":senond_incentive1.split(\"/\")[y],\n    })\n    x.save()",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "incentive_one_slab",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:26:44.198452",
  "module": null,
  "name": "Incentive First Slab",
  "reference_doctype": null,
  "script": "i=0\nx = frappe.get_doc('Incentive',frappe.form_dict.incentive_doc)\n\nfirst_slab1=frappe.form_dict.first_slab\nfirst_incentive1=frappe.form_dict.first_incentive\n\n\n\nbad_chars = ['[', ']', ',','\"']\n\nfor z in bad_chars:\n    first_slab1 = first_slab1.replace(z,'')\n    \nfor z in bad_chars:\n    first_incentive1 = first_incentive1.replace(z,'')\n\n\n\nfor y in first_slab1.split(\"/\"):\n    i=int(i)+1\n    \n    \n\nfor y in range(0,int(i)-1):\n    x.append(\"first_slab\", \n    {\n            \"slab\":first_slab1.split(\"/\")[y],\n            \"incentive\":first_incentive1.split(\"/\")[y],\n    })\n    x.save()\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-03-23 11:27:36.645961",
  "module": null,
  "name": "Timesheet -Visit count",
  "reference_doctype": "Timesheet",
  "script": "count=0\nnew_lead=0\nfor t in doc.get(\"time_logs\"):\n        count=count+1\n        if t.type==\"Lead\":\n            if t.new_lead==1:\n                new_lead=new_lead+1    \n        doc.total_visit=count\n        doc.new_lead=new_lead\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "cancel_additional_salary",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:28:14.819809",
  "module": null,
  "name": "Cancel_additional_salary",
  "reference_doctype": null,
  "script": "doc1 = frappe.get_doc('Additional Salary',frappe.form_dict.name)\ndoc1.cancel()\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "timesheet_row_add",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:28:48.525626",
  "module": null,
  "name": "Task-Timesheet ChildRow",
  "reference_doctype": null,
  "script": "#frappe.msgprint(frappe.form_dict.hours)\nx = frappe.get_doc('Timesheet',frappe.form_dict.timesheet)\nx.append(\"time_logs\", \n{\n        # \"activity_type\":frappe.form_dict.activity_type,\n        \"type\":frappe.form_dict.type,\n        \"doc_id\":frappe.form_dict.doc_id,\n        \"from\":frappe.form_dict.from_time1,\n        \"time1\":frappe.form_dict.time1,\n        \"to\":frappe.form_dict.to_time1,\n        \"time2\":frappe.form_dict.time2,\n        \n        \"new_lead\":frappe.form_dict.newlead,\n        \"date1\":frappe.form_dict.date1,\n        \"employee\":frappe.form_dict.employee\n})\nx.save()\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "event_frequency": "All",
  "modified": "2023-03-23 11:29:43.178764",
  "module": null,
  "name": "employee before validate",
  "reference_doctype": "Employee",
  "script": "validate1=\" \"\nvalidate2=\" \"\nvalidate3=\" \"\n\nif not doc.employee_permission:\n    \n    if frappe.db.exists({\"doctype\": \"Account\", \"account_name\":doc.incentive_payable}):\n        validate1=\"false\"\n        \n    if frappe.db.exists({\"doctype\": \"User\", \"email\":doc.email_id}):\n        validate2=\"false\"\n        \n    if frappe.db.exists({\"doctype\": \"Employee\", \"name\":doc.employee_number}):\n        validate3=\"false\"\n    \n    if validate1==\"false\" or validate2==\"false\" or validate3==\"false\":\n        frappe.throw(\n                        title='Duplicate Error',\n                        msg=\"Please don't enter existing Employee Number,Email Id and Incentive Payable\",\n                    )\n                    \n        raise frappe.ValidationError\n    else:\n        doc1=frappe.get_doc({\n                \"doctype\": \"Employee Permission\",\n                \"employee\": doc.employee_number,\n        })\n        doc1.insert()\n        \n        doc2=frappe.get_doc({\n                \"doctype\": \"Heads Permission\",\n                \"employee\": doc.employee_number,\n        })\n        doc2.insert()\n        \n        doc.employee_permission=doc.employee_number\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-03-23 11:32:35.248046",
  "module": null,
  "name": "sales order - before save",
  "reference_doctype": "Sales Order",
  "script": "if doc.quotation:\n    doc = frappe.get_doc(\"Quotation\",doc.quotation)\n    doc.created_salesorder=1\n    doc.save(ignore_permissions=True)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-05-12 17:06:26.484556",
  "module": null,
  "name": "Api update child table",
  "reference_doctype": "UpdateTable",
  "script": "\n\nx = frappe.get_doc(doc.doc_type,doc.reference_doc)\n\nif doc.doc_type==\"Lead\":\n    # \n   \n    if doc.table_name==\"notes\":\n        x.append(\"notes\", \n        {\n                \"note\":doc.note,\n                \"added_by\":doc.added_by,\n                \"added_on\":doc.added_on,\n                \"note1\":doc.added_on,\n        }),\n    if doc.table_name==\"meeting_updates2\":\n        x.append(\"meeting_updates2\", \n        {\n                \"contact_date\":doc.contact_date,\n                \"notes\":doc.notes,\n                \"employee_id\":doc.emp_id,\n                \"name1\":doc.emp_name,\n                \"fromtime\":doc.from_time,\n                \"totime\":doc.to_time,\n                \"contact_time1\":doc.from_time,\n                \"task_type\":doc.task_type,\n                \"next_contact_date\":doc.next_contact_date\n        })\n    if doc.table_name==\"member_details1\":\n        if doc.row_id:\n            for row in x.get(\"member_details1\"):\n                if str(row.name)==str(doc.row_id):\n                    row.member_name=doc.member_name\n                    row.gender=doc.gender\n                    row.relation_with_lead=doc.relation_with_lead\n                    row.age=doc.age\n                    row.education=doc.education\n                    row.occupation=doc.occupation\n                    row.dob=doc.dob\n                    row.marital_status=doc.marital_status\n                    row.blood_group=doc.blood_group\n                    \n                    \n        \n        else:\n            x.append(\"member_details1\", \n            {\n                    \"member_name\":doc.member_name,\n                    \"gender\":doc.gender,\n                    \"relation_with_lead\":doc.relation_with_lead,\n                    \"age\":doc.age,\n                    \"education\":doc.education,\n                    \"occupation\":doc.occupation,\n                    \"dob\":doc.dob,\n                    \"marital_status\": doc.marital_status,\n                    \"blood_group\":doc.blood_group\n            })\n    \n    if doc.table_name==\"lead_events\":\n        # frappe.msgprint(\"SUCCESS\")\n        \n        x.append(\"lead_events\", \n        {\n                \"event_name\":doc.event_name,\n                \"date\":doc.event_date,\n                \"remarks\":doc.remarks,\n               \n        })\n        \n    if doc.table_name==\"site_status\":\n        x.append(\"site_status\", \n        {\n                \"current_status\":doc.current_status,\n                \"date\":doc.date,\n                \"remarks\":doc.remark,\n                \"upload_photo\":doc.upload_photo\n               \n        })\n    if doc.table_name==\"customer_requirements\":\n        if doc.row_id1:\n            for row in x.get(\"customer_requirements\"):\n                if str(row.name)==str(doc.row_id1):\n                    row.product=doc.product\n                    row.qty=doc.quantity\n                    row.color=doc.color\n                    row.uom=doc.uom\n                    row.image=doc.image\n        \n        elif doc.delete_id_1:\n            \n            child_table = x.get(\"customer_requirements\")\n\n            row_name = doc.delete_id_1\n            \n            for idx, row in enumerate(child_table):\n                if row.get(\"name\") == row_name:\n                    \n                    \n                    x.get(\"customer_requirements\").remove(row)\n                    \n                    for remaining_row in child_table:\n                        remaining_row.idx = idx\n                    break\n                \n        else:\n             x.append(\"customer_requirements\", \n                {\n                        \"product\":doc.product,\n                        \"qty\":doc.quantity,\n                        \"color\":doc.color,\n                        \"uom\":doc.uom,\n                        \"image\":doc.image\n                       \n                })\n            \n        \n        \n        \n        \n        \n        \n        \n       \n\nif doc.doc_type==\"Customer\":\n    if doc.table_name==\"meeting_updates2\":\n        x.append(\"meeting_updates2\", \n        {\n                \"contact_date\":doc.contact_date,\n                \"notes\":doc.notes,\n                \"employee_id\":doc.emp_id,\n                \"name1\":doc.emp_name,\n                \"fromtime\":doc.from_time,\n                \"totime\":doc.to_time,\n                \"contact_time1\":doc.from_time,\n                \"task_type\":doc.task_type,\n                \"next_contact_date\":doc.next_contact_date\n        })\n    \nx.save()\n\n\n\n\n# if doc.doc_type==\"Quotation\":\n   \n#     if doc.table_name==\"items\":\n#         x.append(\"items\", \n#         {\n#                 \"item_code\":doc.item_code,\n#                 \"qty\":doc.qty,\n#                 \"dealer_delivery\":doc.dealer_delivery,\n#                 \"sub_dealer_\":doc.sub_dealer,\n#                 \"mop\":doc.mop,\n#                 \"mrp\":doc.mrp,\n#                 \"price_list_rate\":doc.price_list_rate,\n#                 \"amount\":doc.amount\n#         })\n# x.save()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-09-23 15:35:15.564077",
  "module": null,
  "name": "Lead",
  "reference_doctype": "Lead",
  "script": "if doc.is_new():\n    supervisor=frappe.db.get_value('Company',\"Lamit\",'marketing_supervisor_email')\n    doc.marketing_supervisor=supervisor\n    doc.date=frappe.utils.nowdate()\n\n\n# frappe.msgprint(doc.company,\"ppppp\")\n\nif doc.created_by:    \n    doc1 = frappe.get_doc('Employee', doc.created_by)\n    doc.created_name=doc1.employee_name  \n\n\nif doc.is_new():\n        \n    # frappe.msgprint(\"HIII\")\n    doc.new_lead=1\n    \nelse:\n    doc.new_lead=0\n    # frappe.msgprint(\"Hello\")\n    \n    \n# if not frappe.db.exists(\"Engineer\", doc.lead_name):\n\n#     if(doc.lead_category==\"Engineer / Architects\"):\n    \n   \n    \n    \n#         # frappe.msgprint(\"HII\")\n        \n#         doc = frappe.get_doc({\n#                 'doctype': 'Engineer',\n                \n#                 \"name1\":doc.lead_name,\n                \n                \n               \n#             })\n#     doc.insert()\n    \n    \n    # elif(doc.lead_category==\"Contractor / Truss Workers\"):\n        \n        \n\n\n\n\n\n\n\n\n\n# doc.company=\"\"\n\n# if doc.referenced_by==\"Shop\":\n\n#     if doc.shop1!=\"\":\n    \n#         if not frappe.db.exists(\"Customer\", doc.shop1):\n            \n#             # frappe.msgprint(\"hiiii\")\n        \n#             doc.shop1!=\"\"\n#             doc = frappe.get_doc({\n#                 'doctype': 'Customer',\n#                 \"customer_name\": doc.shop1,\n#                 \"customer_group\":doc.lead_category,\n#                 \"territory\":\"India\",\n#                 \"lead\":doc.name,\n#                 \"lead_name\":doc.name,\n#                 \"source\":doc.source,\n#                 \"referenced_by\":doc.referenced_by,\n#                 \"reference_name\":doc.shop1,\n#                 \"state\":doc.states,\n#                 \"district\":doc.district,\n#                 \"customer_area\":doc.lac,\n#                 \"lead_owner_id\":doc.lead_owners,\n#                 \"owner_name\":doc.owner_name,\n               \n#             })\n#             doc.insert()\n            \n            \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-03-23 11:35:25.570178",
  "module": null,
  "name": "Lead -After Save",
  "reference_doctype": "Lead",
  "script": "lead_table=[]\nl_event=[]\nl_date=[]\nl_remind_before=[]\nl_remarks=[]\n\nd_table_id=[]\nd_event=[]\nd_date=[]\nd_remind_before=[]\nd_remark=[]\nd_name=[]\n\nif doc.lead_events:\n    x=len(doc.lead_events)\n    for l in doc.get(\"lead_events\"):\n        lead_table.append(l.name)\n        l_event.append(l.event_name)\n        l_date.append(l.date)\n        # l_remind_before.append(l.remind_before)\n        l_remarks.append(l.remarks)\n        \n        \n# for f in frappe.db.get_list('Customer Events',filters={'notification_to':\"Lead\",\"reference_id\":doc.name},fields=[\"name\",\"table_id\",\"event\",\"date\",\"remind_before\",\"remark\"]):\nfor f in frappe.db.get_list('Customer Events',filters={'notification_to':\"Lead\",\"reference_id\":doc.name},fields=[\"name\",\"table_id\",\"event\",\"date\",\"remark\"]):\n    if f:\n        d_table_id.append(f.table_id)\n        d_event.append(f.event)\n        d_date.append(f.date)\n        d_name.append(f.name)\n        # if f.remind_before:\n        #     d_remind_before.append(f.remind_before)\n        # else:\n        #     d_remind_before.append(\"\")\n        if f.remark:\n            d_remark.append(f.remark)\n        else:\n            d_remark.append(\"\")\n\n\nif lead_table !=[] and d_table_id !=[]:\n    for x in range(0,len(d_table_id)):\n        # frappe.msgprint(\"d_table_id[x]  \"+str(d_table_id[x]))\n        # if int(d_table_id[x]) in lead_table:\n        if d_table_id[x] in lead_table:\n            h=d_event.index(str(l_event[x]))\n        #     if(l_event[x]!=d_event[h]):\n        # #     # if(l_event[x]!=d_event[x] or l_date[x]!=d_date[x] or l_remind_before[x]!=d_remind_before[x] or l_remarks[x]!=d_remark[x]):\n        #         frappe.msgprint(\"c6\")\n        #         frappe.db.set_value('Customer Events',d_name[x],{'event':l_event[x],\"date\":l_date[x],\"remind_before\":l_remind_before[x],\"remark\":l_remarks[x]})\n                \n        else:\n            frappe.delete_doc('Customer Events',str(d_name[x]))\n            break\n\n    for x in range(0,len(lead_table)):\n        if  str(lead_table[x]) not in d_table_id:\n            doc_event= frappe.get_doc({'doctype':'Customer Events'})\n            doc_event.notification_to=\"Lead\"\n            doc_event.reference_id=doc.name\n            doc_event.table_id=lead_table[x]\n            doc_event.event=l_event[x]\n            doc_event.date=l_date[x]\n            doc_event.name1=doc.lead_name\n            doc_event.marketing_officer_email=doc.marketing_officer_email\n            doc_event.sales_officer_email=doc.sales_officer_email\n            # doc_event.remind_before=l_remind_before[x]\n            doc_event.remark=l_remarks[x]\n            doc_event.insert()\n\nif lead_table !=[] and d_table_id ==[]:\n    for i in range(0,len(lead_table)):\n        doc_event= frappe.get_doc({'doctype':'Customer Events'})\n        doc_event.notification_to=\"Lead\"\n        doc_event.reference_id=doc.name\n        doc_event.table_id=lead_table[i]\n        doc_event.event=l_event[i]\n        doc_event.date=l_date[i]\n        doc_event.name1=doc.lead_name\n        doc_event.marketing_officer_email=doc.marketing_officer_email\n        doc_event.sales_officer_email=doc.sales_officer_email\n        # doc_event.remind_before=l_remind_before[i]\n        doc_event.remark=l_remarks[i]\n        doc_event.insert()\n        \nif lead_table ==[] and d_table_id !=[]:\n    for i in range(0,len(d_table_id)):\n        frappe.delete_doc('Customer Events',str(d_name[i]))\n        \n\n            \n\n            \n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "created_customer",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:36:00.935437",
  "module": null,
  "name": "Quotation- created_customer",
  "reference_doctype": null,
  "script": "doc_name=frappe.form_dict.doc_name\n\ndoc = frappe.get_doc(\"Quotation\",doc_name)\ndoc.created_customer =1\n\ndoc.save(ignore_permissions=True)\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-03-23 11:37:56.069178",
  "module": null,
  "name": "Customer -After Save",
  "reference_doctype": "Customer",
  "script": "lead_table=[]\nl_event=[]\nl_date=[]\n# l_remind_before=[]\nl_remarks=[]\n\nd_table_id=[]\nd_event=[]\nd_date=[]\n# d_remind_before=[]\nd_remark=[]\nd_name=[]\n\nif doc.customer_events:\n    for l in doc.get(\"customer_events\"):\n        lead_table.append(l.name)\n        l_event.append(l.event_name)\n        l_date.append(l.date)\n        # l_remind_before.append(l.remind_before)\n        l_remarks.append(l.remarks)\n        \n        \n# for f in frappe.db.get_list('Customer Events',filters={'notification_to':\"Customer\",\"reference_id\":doc.name},fields=[\"name\",\"table_id\",\"event\",\"date\",\"remind_before\",\"remark\"]):\nfor f in frappe.db.get_list('Customer Events',filters={'notification_to':\"Customer\",\"reference_id\":doc.name},fields=[\"name\",\"table_id\",\"event\",\"date\",\"remark\"]):\n\n    if f:\n        d_table_id.append(f.table_id)\n        d_event.append(f.event)\n        d_date.append(f.date)\n        d_name.append(f.name)\n        # if f.remind_before:\n        #     d_remind_before.append(f.remind_before)\n        # else:\n        #     d_remind_before.append(\"\")\n        if f.remark:\n            d_remark.append(f.remark)\n        else:\n            d_remark.append(\"\")\n\nif lead_table !=[] and d_table_id !=[]:\n    for x in range(0,len(d_table_id)):\n        if d_table_id[x] in lead_table:\n        # if int(d_table_id[x]) in lead_table:\n            h=d_event.index(str(l_event[x]))\n        #     if(l_event[x]!=d_event[h]):\n        # #     # if(l_event[x]!=d_event[x] or l_date[x]!=d_date[x] or l_remind_before[x]!=d_remind_before[x] or l_remarks[x]!=d_remark[x]):\n        #         frappe.msgprint(\"c6\")\n        #         frappe.db.set_value('Customer Events',d_name[x],{'event':l_event[x],\"date\":l_date[x],\"remind_before\":l_remind_before[x],\"remark\":l_remarks[x]})\n                \n        else:\n            frappe.delete_doc('Customer Events',str(d_name[x]))\n            break\n\n    for x in range(0,len(lead_table)):\n        if  str(lead_table[x]) not in d_table_id:\n            doc_event= frappe.get_doc({'doctype':'Customer Events'})\n            doc_event.notification_to=\"Customer\"\n            doc_event.reference_id=doc.name\n            doc_event.table_id=lead_table[x]\n            doc_event.event=l_event[x]\n            doc_event.date=l_date[x]\n            doc_event.name1=doc.customer_name\n            doc_event.marketing_officer_email=doc.marketing_officer_email\n            doc_event.sales_officer_email=doc.sales_officer_email\n            # doc_event.remind_before=l_remind_before[x]\n            doc_event.remark=l_remarks[x]\n            doc_event.insert()\n\nif lead_table !=[] and d_table_id ==[]:\n    for i in range(0,len(lead_table)):\n        doc_event= frappe.get_doc({'doctype':'Customer Events'})\n        doc_event.notification_to=\"Customer\"\n        doc_event.reference_id=doc.name\n        doc_event.table_id=lead_table[i]\n        doc_event.event=l_event[i]\n        doc_event.date=l_date[i]\n        doc_event.name1=doc.customer_name\n        doc_event.marketing_officer_email=doc.marketing_officer_email\n        doc_event.sales_officer_email=doc.sales_officer_email\n        # doc_event.remind_before=l_remind_before[i]\n        doc_event.remark=l_remarks[i]\n        doc_event.insert()\n        \nif lead_table ==[] and d_table_id !=[]:\n    for i in range(0,len(d_table_id)):\n        frappe.delete_doc('Customer Events',str(d_name[i]))\n        \n\n            \n\n            \n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-06-14 15:58:40.614241",
  "module": null,
  "name": "customer",
  "reference_doctype": "Customer",
  "script": "#   ----------------------------Details--------------------  \n\na=doc.lead_name\n# frappe.msgprint(a,\"lll\")\nif(a):\n    # frappe.msgprint(\"YES\")\n    \n    \n    doc1 = frappe.get_doc('Lead', a)\n   \n    # product=len(doc1.customer_requirements)\n    products=len(doc.product_details1)\n    members=len(doc.family_details)\n    work_assign=len(doc.follow_up)\n    events=len(doc.customer_events)\n    \n   \n    doc.gender=doc1.gender\n    doc.expected_time_to_purchase=doc1.expected_time_to_purchase\n    doc.state=doc1.states1\n    doc.district=doc1.districts\n    doc.customer_area=doc1.lac\n    doc.source=doc1.source\n    doc.contractor=doc1.contractor\n    doc.customer=doc1.customer\n    doc.employee=doc1.employee\n    doc.engineer=doc1.engineer\n    doc.shop=doc1.shop\n    doc.default_price_list=\"PTC\"\n    \n    \n    doc.owner_name=doc1.owner_name\n    doc.referenced_by=doc1.referenced_by\n    doc.email=doc1.email_id\n    doc.mobile=doc1.mobile_no\n    doc.sale_district=doc1.sale_district\n    doc.sale_area=doc1.sale_area\n    \n    doc.whats_app_no=doc1.whatsapp_no\n    \n    doc.longitude=doc1.longitude\n    doc.latitude=doc1.latitude\n    \n    \n    doc.social_group1=doc1.social_group1\n    doc.marital_status1=doc1.marital_status1\n    doc.family_background1=doc1.family_background1\n    doc.education1=doc1.education1\n    doc.kids=doc1.numberofkids\n    doc.occupation=doc1.occupation\n    \n    doc.email=doc1.email_id\n    doc.phone=doc1.phone\n    doc.whatsapp_no=doc1.whatsapp_no\n    \n    \n    doc.all=doc1.all\n    doc.goods_ape=doc1.goods_ape\n    doc.sml_isuzu=doc1.sml_isuzu\n    doc.mahindra_mini_truck=doc1.mahindra_mini_truck\n    doc.mahindra_jeeto_plus=doc1.mahindra_jeeto_plus\n    doc.tata_ace=doc1.tata_ace\n    doc.mahindra_bolero_pickups=doc1.mahindra_bolero_pickups\n    doc.tata_407=doc1.tata_407\n    doc.eicher=doc1.eicher\n    doc.bharat_benz=doc1.bharat_benz\n    \n    \n    \n    \n    doc.marketing_team_member=doc1.assign_to_marketing_officer\n    doc.marketing_employee=doc1.marketing_officer_name\n    \n    doc.sales_executive=doc1.assign_to_customer_care_executive\n    doc.sales_employee_name=doc1.customer_care_executive_name\n    \n    \n    \n    \n    doc.address_line11=doc1.address_line1\n    doc.address_line22=doc1.address_line2\n    doc.city=doc1.city\n    doc.pin_code=doc1.pin_code\n    doc.country=\"India\"\n    \n    \n    \n    if(doc1.referenced_by==\"Shop\"):\n        doc.reference_name=doc1.shop1\n        \n    elif(doc1.referenced_by==\"Engineer\"):\n         doc.reference_name=doc1.shop1\n    elif(doc1.referenced_by==\"Customer\"):\n        doc.reference_name=doc1.customer1\n    elif(doc1.referenced_by==\"Employee\"):\n        doc.reference_name=doc1.employee1\n        \n        \n        \n        \n        \n        \n        \n    product_table=doc1.get('customer_requirements')\n    for t in product_table:\n        series=t.get('color')\n        product_name=t.get('product')\n        qty=t.get('qty')\n        uom=t.get('uom')\n            \n        if(products==0):\n                \n            row=doc.append('product_details1',{})\n                \n            row.product=product_name\n            row.color=series\n            row.qty=qty\n            row.uom=uom\n            \n            \n            \n   \n        \n\n    membertable=doc1.get('member_details1')\n    for j in membertable:\n        member_name=j.get('member_name')\n        gender=j.get('gender')\n        relation=j.get('relation_with_lead')\n        age=j.get('age')\n        education=j.get('education')\n        occupation=j.get('occupation')\n        dob=j.get('dob')\n        marital_status=j.get('marital_status')\n        blood_group=j.get('blood_group')\n        \n        if(members == 0):\n            row=doc.append('family_details',{})\n            row.member_name=member_name\n            row.gender=gender\n            row.relation_with_lead=relation\n            row.age=age\n            row.education=education\n            row.occupation=occupation\n            row.dob=dob\n            row.marital_status=marital_status\n            row.blood_group=blood_group\n        \n        \n    \n    lead_assign_tables=doc1.get('lead_assign_table')\n    for k in lead_assign_tables:\n        date=k.get('date')\n        employee=k.get('employee')\n        meeting_date=k.get('meeting_date')\n        note=k.get('remark')\n        designation=k.get('designation')\n        time=k.get('time')\n        \n        if(work_assign == 0):\n            row=doc.append('work_assign',{})\n            row.date=date\n            row.employee=employee\n            row.meeting_date=meeting_date\n            row.remark=note\n            row.designation=designation\n            row.time=time\n        \n        \n\n    lead_event=doc1.get('lead_events')\n    for c in lead_event:\n        event_name=c.get('event_name')\n        date=c.get('date')\n        remarks=c.get('remarks')\n        \n        \n        if(events == 0):\n            row=doc.append('customer_events',{})\n            row.event_name=event_name\n            row.date=date\n            row.remarks=remarks\n        \n        \n    \n    \n \n   \n     \n\n     \n     \n     \n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "meeting_update",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:39:50.797848",
  "module": null,
  "name": "meeting update",
  "reference_doctype": null,
  "script": "x = frappe.get_doc('Lead',frappe.form_dict.select_lead_name1)\nx.append(\"meeting_updates2\", \n{\n        \"notes\":frappe.form_dict.note,\n        \"task_status\":frappe.form_dict.status1,\n        \"contact_date\":frappe.form_dict.due_date1,\n        \"name1\":frappe.form_dict.assign1,\n        \"fromtime\":frappe.form_dict.from_time1,\n        \"totime\":frappe.form_dict.to_time1,\n        \"task_type\":frappe.form_dict.task_type1,\n        \"contact_time1\":frappe.form_dict.contact_time\n})\nx.save()\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:40:38.554844",
  "module": null,
  "name": "employeeafterinsert",
  "reference_doctype": "Employee",
  "script": "z=0\nif doc.job_applicant1:\n    doc1=frappe.get_doc(\"Job Applicant\",doc.job_applicant)\n    doc1.status=\"Converted\"\n    doc1.save()\n    \n    doc2=frappe.get_doc(\"Job Opening1\",doc1.job_opening1)\n    if doc2.status ==\"Open\":\n        z=int(doc2.remaining_positions)-1\n        doc2.remaining_positions=z\n        if z==0:\n            doc2.remaining_positions=\"0\"\n            doc2.status=\"Closed\"\n    doc2.save()\n\n    if doc2.staffing_plan:\n        if z==0:\n            status1=\"Closed\"\n            \n            doc3=frappe.get_doc(\"Staffing Plan\",doc2.staffing_plan)\n            for x in doc3.get(\"staffing_details\"):\n                if(x.designation==doc2.designation):\n                    x.status=\"Closed\"\n                    \n            for x in doc3.get(\"staffing_details\"):\n                if(x.status!=\"Closed\"):\n                    status1=\"Open\"\n                    \n            doc3.status1=status1\n            doc3.save()\n\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n            ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:41:36.748133",
  "module": null,
  "name": "Job Opening -Before Save",
  "reference_doctype": "Job Opening1",
  "script": "if not doc.remaining_positions:\n    doc.remaining_positions=doc.planned_vacancies",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:42:47.350866",
  "module": null,
  "name": "account",
  "reference_doctype": "Account",
  "script": "doc.super_stockist=doc.company\n# frappe.msgprint(doc.super_stockist)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2023-03-31 12:18:20.215651",
  "module": null,
  "name": "Leave Application -Before Submit",
  "reference_doctype": "Leave Application",
  "script": "if doc.status1:\n    doc.status=doc.status1\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "update_price_list",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:44:16.637248",
  "module": null,
  "name": "Item - variants price list rate",
  "reference_doctype": null,
  "script": "\ndocname=frappe.form_dict.docname\nhas_variants=frappe.form_dict.has_variants\neuropean_product=frappe.form_dict.european_product\nproduct_series=frappe.form_dict.product_series\nproduct_brand=frappe.form_dict.product_brand\ncost_of_the_price=frappe.form_dict.cost_of_the_price\nsuper_stockist_price=frappe.form_dict.super_stockist_price\ndealer_delivery_price=frappe.form_dict.dealer_delivery_price\nsub_dealer_price=frappe.form_dict.sub_dealer_price\nbuying_price=frappe.form_dict.buying_price\nmop=frappe.form_dict.mop\nmrp=frappe.form_dict.mrp\n\n\n\n\n\nif has_variants==0:\n    if int(european_product)==1:\n        if frappe.db.exists(\"Item Price\", {\"item_code\":docname,\"price_list\":\"Lamit Buying\"}):\n            existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":docname,\"price_list\":\"Lamit Buying\"}, ['name'])\n            \n            doc = frappe.get_doc('Item Price',existing_docname)\n            doc.price_list_rate =buying_price\n            doc.save()\n        else:\n\n            doc2 = frappe.new_doc('Item Price')\n            doc2.item_code =docname,\n            doc2.price_list =\"Lamit Buying\",\n            doc2.buying =1,\n            doc2.price_list_rate =buying_price,\n            doc2.insert()\n            \n        \n        if frappe.db.exists(\"Item Price\", {\"item_code\":docname,\"price_list\":\"PTC\"}):\n            existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":docname,\"price_list\":\"PTC\"}, ['name'])\n            \n            doc = frappe.get_doc('Item Price',existing_docname)\n            doc.series =product_series\n            doc.brands =product_brand\n            doc.price_list_rate =mrp\n            doc.save()\n        else:\n            \n            doc2 = frappe.new_doc('Item Price')\n            doc2.item_code =docname\n            doc2.price_list =\"PTC\"\n            doc2.series =product_series\n            doc2.brands =product_brand\n            doc2.price_list_rate =mrp\n            doc2.insert()\n    else:\n        if frappe.db.exists(\"Item Price\", {\"item_code\":docname,\"price_list\":\"Lamit Buying\"}):\n            existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":docname,\"price_list\":\"Lamit Buying\"}, ['name'])\n            \n            doc = frappe.get_doc('Item Price',existing_docname)\n            doc.price_list_rate =buying_price\n            doc.save()\n        else:\n\n            doc2 = frappe.new_doc('Item Price')\n            doc2.item_code =docname\n            doc2.price_list =\"Lamit Buying\"\n            doc2.buying =1\n            doc2.price_list_rate =buying_price\n            doc2.insert()\n            \n        \n        if frappe.db.exists(\"Item Price\", {\"item_code\":docname,\"price_list\":\"PTC\"}):\n            existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":docname,\"price_list\":\"PTC\"}, ['name'])\n            \n            doc = frappe.get_doc('Item Price',existing_docname)\n            doc.series =product_series\n            doc.brands =product_brand\n            doc.dealer_delivery_price =dealer_delivery_price\n            doc.sub_dealer_price =sub_dealer_price\n            doc.price_list_rate =mrp\n            doc.mop =mop\n            doc.save()\n        else:\n            \n            doc2 = frappe.new_doc('Item Price')\n            doc2.item_code =docname\n            doc2.price_list =\"PTC\"\n            doc2.series =product_series\n            doc2.brands =product_brand\n            doc2.price_list_rate =mrp\n            doc2.dealer_delivery_price =dealer_delivery_price\n            doc2.sub_dealer_price =sub_dealer_price\n            doc2.mop =mop\n            doc2.insert()\n            \n        if frappe.db.exists(\"Item Price\", {\"item_code\":docname,\"price_list\":\"PTS\"}):\n            existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":docname,\"price_list\":\"PTS\"}, ['name'])\n            \n            doc = frappe.get_doc('Item Price',existing_docname)\n            doc.series =product_series\n            doc.brands =product_brand\n            doc.price_list_rate =super_stockist_price\n            doc.mrp =mrp\n            doc.mop =mop\n            doc.save()\n        else:\n            \n            doc2 = frappe.new_doc('Item Price')\n            doc2.item_code =docname\n            doc2.price_list =\"PTS\"\n            doc2.series =product_series\n            doc2.brands =product_brand\n            doc2.mop =mop\n            doc2.mrp =mrp\n            doc2.price_list_rate =super_stockist_price\n            doc2.insert()\nelse:\n    for item in frappe.db.get_list('Item',filters={'variant_of':docname}):\n        if item:\n            if int(european_product)==1:\n                if frappe.db.exists(\"Item Price\", {\"item_code\":item.name,\"price_list\":\"Lamit Buying\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":item.name,\"price_list\":\"Lamit Buying\"}, ['name'])\n                    \n                    doc = frappe.get_doc('Item Price',existing_docname)\n                    doc.price_list_rate =buying_price\n                    doc.save()\n                else:\n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =item.name,\n                    doc2.price_list =\"Lamit Buying\",\n                    doc2.buying =1,\n                    doc2.price_list_rate =buying_price,\n                    doc2.insert()\n                    \n                \n                if frappe.db.exists(\"Item Price\", {\"item_code\":item.name,\"price_list\":\"PTC\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":item.name,\"price_list\":\"PTC\"}, ['name'])\n                    \n                    doc = frappe.get_doc('Item Price',existing_docname)\n                    doc.series =product_series\n                    doc.brands =product_brand\n                    doc.price_list_rate =mrp\n                    doc.save()\n                else:\n                    \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =item.name\n                    doc2.price_list =\"PTC\"\n                    doc2.series =product_series\n                    doc2.brands =product_brand\n                    doc2.price_list_rate =mrp\n                    doc2.insert()\n                    \n            else:\n                if frappe.db.exists(\"Item Price\", {\"item_code\":item.name,\"price_list\":\"Lamit Buying\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":item.name,\"price_list\":\"Lamit Buying\"}, ['name'])\n                    \n                    doc = frappe.get_doc('Item Price',existing_docname)\n                    doc.price_list_rate =buying_price\n                    doc.save()\n                else:\n        \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =item.name\n                    doc2.price_list =\"Lamit Buying\"\n                    doc2.buying =1\n                    doc2.price_list_rate =buying_price\n                    doc2.insert()\n                    \n                \n                if frappe.db.exists(\"Item Price\", {\"item_code\":item.name,\"price_list\":\"PTC\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":item.name,\"price_list\":\"PTC\"}, ['name'])\n                    \n                    doc = frappe.get_doc('Item Price',existing_docname)\n                    doc.series =product_series\n                    doc.brands =product_brand\n                    doc.price_list_rate =mrp\n                    doc.mop =mop\n                    doc.dealer_delivery_price =dealer_delivery_price\n                    doc.sub_dealer_price =sub_dealer_price\n                    doc.save()\n                else:\n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =item.name\n                    doc2.price_list =\"PTC\"\n                    doc2.series =product_series\n                    doc2.brands =product_brand\n                    doc2.dealer_delivery_price =dealer_delivery_price\n                    doc2.sub_dealer_price =sub_dealer_price\n                    doc2.price_list_rate =mrp\n                    doc2.mop =mop\n                    doc2.insert()\n                    \n                if frappe.db.exists(\"Item Price\", {\"item_code\":item.name,\"price_list\":\"PTS\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":item.name,\"price_list\":\"PTS\"}, ['name'])\n                    \n                    doc = frappe.get_doc('Item Price',existing_docname)\n                    doc.series =product_series\n                    doc.brands =product_brand\n                    doc.price_list_rate =super_stockist_price\n                    doc.mrp =mrp\n                    doc.mop =mop\n                    doc.save()\n                else:\n                    \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =item.name\n                    doc2.price_list =\"PTS\"\n                    doc2.series =product_series\n                    doc2.brands =product_brand\n                    doc2.mop =mop\n                    doc2.mrp =mrp\n                    doc2.price_list_rate =super_stockist_price\n                    doc2.insert()\n            \n            \n            \n            \n        \n\n        \n\n\n\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2023-05-29 19:51:18.511237",
  "module": null,
  "name": "Producti nsert",
  "reference_doctype": "Product",
  "script": "\nif doc.variant_of:\n    if doc.european_product_value==\"1\":\n            # frappe.msgprint(\"aftersave1\")\n            if doc.buying_price:\n                if frappe.db.exists(\"Item Price\", {\"item_code\":doc.name,\"price_list\":\"Lamit Buying\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":doc.name,\"price_list\":\"Lamit Buying\"}, ['name'])\n                    \n                    doc2 = frappe.get_doc('Item Price',existing_docname)\n                    doc2.price_list_rate =doc.buying_price\n                    doc2.save()\n                else:\n        \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =doc.name,\n                    doc2.price_list =\"Lamit Buying\",\n                    doc2.buying =1,\n                    doc2.price_list_rate =doc.buying_price,\n                    doc2.insert()\n                \n            if doc.mrp:\n                if frappe.db.exists(\"Item Price\", {\"item_code\":doc.name,\"price_list\":\"PTC\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":doc.name,\"price_list\":\"PTC\"}, ['name'])\n                    \n                    doc2 = frappe.get_doc('Item Price',existing_docname)\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.price_list_rate =doc.mrp\n                    doc2.save()\n                else:\n                    \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =doc.name\n                    doc2.price_list =\"PTC\"\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.price_list_rate =doc.mrp\n                    doc2.insert()\n    else:\n            if doc.buying_price:\n                if frappe.db.exists(\"Item Price\", {\"item_code\":doc.name,\"price_list\":\"Lamit Buying\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":doc.name,\"price_list\":\"Lamit Buying\"}, ['name'])\n                    \n                    doc2 = frappe.get_doc('Item Price',existing_docname)\n                    doc2.price_list_rate =doc.buying_price\n                    doc2.save()\n                else:\n        \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =doc.name\n                    doc2.price_list =\"Lamit Buying\"\n                    doc2.buying =1\n                    doc2.price_list_rate =doc.buying_price\n                    doc2.insert()\n                \n            if doc.mrp:\n                if frappe.db.exists(\"Item Price\", {\"item_code\":doc.name,\"price_list\":\"PTC\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":doc.name,\"price_list\":\"PTC\"}, ['name'])\n                    \n                    doc2 = frappe.get_doc('Item Price',existing_docname)\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.dealer_delivery_price =doc.dealer_delivery_price\n                    doc2.sub_dealer_price =doc.sub_dealer_price\n                    doc2.price_list_rate =doc.mrp\n                    doc2.mop =doc.mop\n                    doc2.save()\n                else:\n                    \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =doc.name\n                    doc2.price_list =\"PTC\"\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.dealer_delivery_price =doc.dealer_delivery_price\n                    doc2.sub_dealer_price =doc.sub_dealer_price\n                    doc2.price_list_rate =doc.mrp\n                    doc2.mop =doc.mop\n                    doc2.insert()\n                \n                \n            if doc.super_stockist_price:    \n                if frappe.db.exists(\"Item Price\", {\"item_code\":doc.name,\"price_list\":\"PTS\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":doc.name,\"price_list\":\"PTS\"}, ['name'])\n                    \n                    doc2 = frappe.get_doc('Item Price',existing_docname)\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.mop =doc.mop\n                    doc2.mrp =doc.mrp\n                    doc2.price_list_rate =doc.super_stockist_price\n                    doc2.save()\n                else:\n                    \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =doc.name\n                    doc2.price_list =\"PTS\"\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.mop =doc.mop\n                    doc2.mrp =doc.mrp\n                    doc2.price_list_rate =doc.super_stockist_price\n                    doc2.insert()\n                \n                ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-05-29 18:13:55.199130",
  "module": null,
  "name": "Item-Variant price",
  "reference_doctype": "Product",
  "script": "if doc.variant_of:\n\n    \n    for t in doc.attributes:\n        # frappe.msgprint(t.attribute_value)\n        doc.color=t.attribute_value\n    \n        \n    doc1=frappe.get_doc(\"Item\",doc.variant_of)\n    doc.product_brand=doc1.product_brand\n    doc.product_series=doc1.product_series\n    doc.product_type=doc1.product_type\n    doc.cost_of_the_price=doc1.cost_of_the_price\n    doc.buying_price=doc1.buying_price\n    doc.sub_product=doc1.sub_product\n    doc.product_quality=doc1.product_quality\n    doc.incentive=doc1.incentive\n    doc.size=doc1.size\n    doc.weight=doc1.weight\n    doc.pieces_for_every_square=doc1.pieces_for_every_square\n    doc.european_product_value=doc1.european_product_value\n    doc.super_stockist_price=doc1.super_stockist_price\n    doc.dealer_delivery_price=doc1.dealer_delivery_price\n    doc.sub_dealer_price=doc1.sub_dealer_price\n    doc.mop=doc1.mop\n    doc.mrp=doc1.mrp\n    doc.tax_percentage=doc1.tax_percentage\n    \n    \n    \n    # if doc.is_new():\n    \n    \n    #     for i in frappe.get_list(\"Company\",filters={'name':('not in',('Lamit'))}):\n    \n    #             warehouse=frappe.db.get_value('Company',i.name,'warehouse')\n    #             row=doc.append('item_defaults',{})\n                            \n    #             row.company=i.name\n    #             row.default_warehouse=warehouse\n\n\n\n\n\n# if doc.is_new():\n#     if doc.has_variants==1:\n        \n#         for i in frappe.get_list(\"Company\",filters={'name':('not in',('Lamit'))}):\n\n#             warehouse=frappe.db.get_value('Company',i.name,'warehouse')\n#             row=doc.append('item_defaults',{})\n                        \n#             row.company=i.name\n#             row.default_warehouse=warehouse\n            \n\n\n# if doc.has_variants==1:\n#         # frappe.msgprint(\"P\")\n#     for i in frappe.get_list(\"Company\"):\n#             # frappe.msgprint(i.name)\n#         warehouse=frappe.db.get_value('Company',i.name,'warehouse')\n            \n#         # doc.item_defaults = []\n#         # refresh_field(\"item_defaults\")\n        \n#         frappe.msgprint(warehouse)\n            \n#         row=doc.append('item_defaults',{})\n                        \n#         row.company=i.name\n#         row.default_warehouse=warehouse\n    \n    \n\n\n\n        \n\n\n        \n       ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-03-23 11:47:09.225436",
  "module": null,
  "name": "Appointment Letter- Before Save",
  "reference_doctype": "Appointment Letter1",
  "script": "doc2=frappe.get_doc(\"Salary Structure\",doc.salary_structure)\nif not frappe.db.exists({\"doctype\": \"Salary Structure Assignment\", \"employee\":\"SO26\",\"salary_structure\":doc.salary_structure,\"docstatus\":1}):\n    if frappe.db.exists({\"doctype\": \"Salary Structure Assignment\", \"employee\":doc.employee,\"docstatus\":1}):\n        doc_name = frappe.db.get_value('Salary Structure Assignment', {'employee':doc.employee,\"docstatus\":1}, ['name'])\n        \n        doc3=frappe.get_doc(\"Salary Structure Assignment\",doc_name)\n        doc3.docstatus=2\n        doc3.save()\n\n    doc1= frappe.get_doc({'doctype':'Salary Structure Assignment'})\n    doc1.base=doc2.total_earning\n    doc1.employee=doc.employee\n    doc1.salary_structure=doc.salary_structure\n    doc1.from_date=doc.appointment_date\n    # doc1.from_date=frappe.utils.now_datetime()\n    doc1.company=doc.company\n    doc1.docstatus=1\n    doc1.insert()\n        \ndoc.salary_per_month=doc2.total_earning\ndoc.ctc=12*float(doc2.total_earning)\n    \nbonus1=0\nbonus2=0\nincentive1=0\nincentive2=0\nfor x in doc2.get(\"earnings\"):\n    if x.salary_component==\"Basic\":\n        doc.basic_salary=x.amount\n    elif x.salary_component==\"Bonus\":\n        if x.amount:\n            bonus1=x.amount\n    elif x.salary_component==\"Incentive\":\n        if x.amount:\n            incentive1=x.amount\n            \n            \n    for x in doc.get(\"common_salary_details\"):\n        if x.components==\"Bonus\":\n            if x.amount:\n                bonus2=x.amount\n        elif x.components==\"Incentives\":\n            if x.amount:\n                incentive2=x.amount\n            \n    doc.bonus=int(bonus1)+int(bonus2)\n    doc.incentive=int(incentive1)+int(incentive2)\n    doc.total=int(doc.ctc)+int(doc.bonus)+int(doc.incentive)\n            \n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "event_frequency": "All",
  "modified": "2023-08-23 14:16:40.837225",
  "module": null,
  "name": "Salary Slip -Before Save",
  "reference_doctype": "Salary Slip",
  "script": "if not doc.year2:\n    fullday_count=0\n    halfday_count=0\n    total_count=0\n    \n    fullday_count=frappe.db.count('Attendance', {'employee':doc.employee,\"status\":\"Present\",'attendance_date':['between', [doc.start_date,doc.end_date]]})\n    halfday_count=frappe.db.count('Attendance', {'employee':doc.employee,\"status\":\"Half Day\",'attendance_date':['between', [doc.start_date,doc.end_date]]})\n    \n    total_count=float(fullday_count)+(float(halfday_count)*.5)\n    \n    \n    \n\n    year=doc.start_date.split(\"-\")[0]\n    month=doc.start_date.split(\"-\")[1]\n    month1=month.removeprefix(\"0\")\n    start_date=doc.start_date\n    doc.year2=year\n    doc.year=year\n    \n    month_full=[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n    month_short=[\" \",\"Jan\",\"Feb\",\"March\",\"April\",\"May\",\"June\",\"July\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n\n    selected_monthfull=month_full[int(month1)]\n    selected_monthshort=month_short[int(month1)]\n    \n    doc.month1=selected_monthfull\n    doc.month=selected_monthshort\n    doc.days=total_count\n    # doc.start_date.clear()\n    # doc.start_date=start_date\n    # frappe.msgprint(str(doc.start_date))",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "incentive_calculation1",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-03-23 11:48:40.383623",
  "module": null,
  "name": "Sales Invoice-Incentive Calculation1",
  "reference_doctype": null,
  "script": "total_sale=0\npremium_point=0\ncumulative_grand_total=0\ncumulative_received_amount=0\ncumulative_outstanding=0\ndoc_last_incentive=\" \"\ndoc_target_name=\" \"\ndoc_incentive_slab=\" \"\ndoc_incentive_last_month_percentage=\" \"\ntarget_achieved_percentage=0\npremium_point_achieved=0\nemployee_based_slab=\" \"\n\npercentage=\" \"\nincentive_value=\" \"\nincentive_value_full=\" \"\nincentive=0\n\ncommon_premium_point=0\ncommon_total_sale=0\n\ndoc_incentive_premium_point=\" \"\ndoc_incentive_total_sale=0\ndoc_incentive_cumulative_grand_total=0\ndoc_incentive_total_received_amount=0\ndoc_incentive_total_outstanding=0\nemployee_name=\" \"\nteam_members1=[]\nmember_percentage=0\nn=0\n\n\n#------------------------------------------------FUNCTION DEFINED-----------------------------------------------------------------------#\n\n# def clear_variable():\n\n#     doc_target_name=\" \" \n#     doc_incentive_last_month_percentage=\" \"\n#     premium_point=0\n#     total_sale=0\n#     premium_point_achieved=0\n#     cumulative_grand_total=0\n#     cumulative_received_amount=0\n#     cumulative_outstanding=0\n#     target_achieved_percentage=0\n#     doc_incentive_slab=\" \"\n#     employee_based_slab=\" \"\n#     percentage=\" \"\n#     incentive=0\n#     incentive_value=\" \"\n#     incentive_value_full=\" \"\n#     doc_last_incentive=\" \"\n\n\n\n    \n#     doc_target=\" \"\n#     employee=\" \"\n#     employee_name=\" \"\n#     doc_last_incentive=\" \"\n#     doc_incentive_total_sale=\" \"\n#     doc_incentive_premium_point=\" \"\n#     doc_incentive_cumulative_grand_total=\" \"\n#     doc_incentive_total_received_amount=\" \"\n#     doc_incentive_total_outstanding=\" \"\n#     doc_incentive_last_month_percentage=\" \"\n#     slab_doc_above_or_below=\" \"\n#     get_incentive_slab_doc=\" \"\n#     slab_symbol=\" \"\n#     slab_number1=\" \"\n#     slab_number2=\" \"\n    \ndef select_employee_details(employee):\n    doc_target_name=\" \"\n    doc_target=\" \"\n    employee_name=\" \"\n    emp_designation=\" \"\n    \n    \n    \n    for t in frappe.db.get_list('Target',filters={'active':1,'employee':employee},fields=[\"target\",\"name\",\"employee\",\"employee_name\",\"designation\"]):\n        if t:\n            doc_target_name=t.name\n            doc_target=t.target\n            employee=t.employee\n            employee_name=t.employee_name\n            emp_designation=t.designation\n            \n    return [str(doc_target_name),str(doc_target),str(employee),str(employee_name),str(emp_designation)]\n\ndef incentive_calculation_based_on_first_slab(A,B,C,D,E,F,G,e1,e2,e3,e4,e5):\n    doc_incentive_last_month_percentage=A\n    doc_last_incentive=B\n    doc_incentive_premium_point=C\n    doc_incentive_total_sale=D\n    doc_incentive_cumulative_grand_total=E\n    doc_incentive_total_received_amount=F\n    doc_incentive_total_outstanding=G\n    doc_incentive_slab=\" \"\n    target_achieved_percentage=\" \"\n    \n    incentive=0\n    doc_target_name=e1\n    doc_target=e2\n    employee=e3\n    employee_name=e4\n    emp_designation=e5\n    incentive_value=\" \"\n    percentage=\" \"\n    total_sale=0\n    premium_point=0\n    cumulative_grand_total=0\n    cumulative_received_amount=0\n    cumulative_outstanding=0\n\n    if doc_target_name !=\" \":\n        for i in frappe.db.get_list('Incentive',filters={'active':1,'target_id':doc_target_name}):\n            doc_last_incentive=i.name\n            doc_incentive_total_sale=frappe.db.get_value('Incentive',doc_last_incentive,'total_sale')\n            doc_incentive_premium_point=frappe.db.get_value('Incentive',doc_last_incentive,'premium_point')\n            doc_incentive_last_month_percentage=frappe.db.get_value('Incentive',doc_last_incentive,'last_month_percentage')\n            doc_incentive_cumulative_grand_total=frappe.db.get_value('Incentive',doc_last_incentive,'cumulative_grand_total')\n            doc_incentive_total_received_amount=frappe.db.get_value('Incentive',doc_last_incentive,'total_received_amount')\n            doc_incentive_total_outstanding=frappe.db.get_value('Incentive',doc_last_incentive,'total_outstanding')\n    \n        if doc_incentive_last_month_percentage==\" \":\n            # for i in frappe.db.get_list('Incentive',filters={'last_released':1,'employee':doc_marketing_officer},fields=[\"achieved_percentage\"]):\n            for i in frappe.db.get_list('Incentive',filters={'last_released':1,'employee':employee},fields=[\"achieved_percentage\"]):\n                doc_incentive_last_month_percentage=i.achieved_percentage \n    \n        if doc_last_incentive !=\" \":\n            if doc_incentive_premium_point:\n                premium_point=float(common_premium_point)+float(doc_incentive_premium_point)\n            else:\n                premium_point=float(common_premium_point)\n                \n            if doc_incentive_total_sale:\n                total_sale=float(common_total_sale)+float(doc_incentive_total_sale)\n            else:\n                total_sale=float(common_total_sale)\n            \n            if doc_incentive_cumulative_grand_total:\n                cumulative_grand_total=float(invoice_grand_total)+float(doc_incentive_cumulative_grand_total)\n            else:\n                cumulative_grand_total=float(invoice_grand_total)\n                \n            if doc_incentive_total_received_amount:\n                cumulative_received_amount=float(invoice_total_advance)+float(doc_incentive_total_received_amount)\n            else:\n                cumulative_received_amount=float(invoice_total_advance)\n            \n            if doc_incentive_total_outstanding:\n                cumulative_outstanding=float(invoice_outstanding_amount)+float(doc_incentive_total_outstanding)\n            else:\n                cumulative_outstanding=float(invoice_outstanding_amount)\n        else:\n            premium_point=float(common_premium_point)\n            total_sale=float(common_total_sale)\n            cumulative_grand_total=float(invoice_grand_total)\n            cumulative_received_amount=float(invoice_total_advance)\n            cumulative_outstanding=float(invoice_outstanding_amount)\n        \n        if doc_target_name !=\" \":\n            target_achieved_percentage=round((float(total_sale)/float(doc_target))*100)\n            # target_achieved_percentage=round(float(total_sale)/float(doc_target))\n            \n            for slab in frappe.db.get_list('Incentive Slab',filters={'active':1,'designation':emp_designation},fields=[\"above_or_below\",\"name\"]):   \n                doc_incentive_slab=slab.name\n                slab_doc_above_or_below=slab.above_or_below\n    \n        #     # #check wether consider previous month target achieved % or not\n        \n            if doc_incentive_slab !=\" \":\n                if emp_designation!=\"Sales Admin\":\n                    if emp_designation==\"Sales Officer\":\n                        if slab_doc_above_or_below:\n                            # depends upon previous month\n                            if doc_incentive_last_month_percentage !=\" \":\n                                # existing employee\n                                if int(target_achieved_percentage)>=150:\n                                    if int(doc_incentive_last_month_percentage)>=int(slab_doc_above_or_below):\n                                        employee_based_slab=\"Above\"\n                                    else:\n                                        employee_based_slab=\"Below\"\n                                else:\n                                    employee_based_slab=\"General\"\n                            else: \n                                # if new employee\n                                employee_based_slab=\"General\"\n                        else:\n                            # not depending previous month\n                            employee_based_slab=\"General\"\n                    else:\n                        employee_based_slab=\"General\"\n                    \n                #     #select employee based slab and compare with achieved % \n                    if  employee_based_slab==\"General\":\n                        get_incentive_slab_doc=frappe.get_doc('Incentive Slab',doc_incentive_slab)\n                        for slab_general in get_incentive_slab_doc.get(\"first_slab_general\"):\n                            slab_symbol=slab_general.symbol\n                            slab_number1=slab_general.number1\n                            slab_number2=slab_general.number2\n                            \n                            if (\">\" in slab_symbol)and(\"=\" in slab_symbol):\n                                if(float(target_achieved_percentage)>=float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                \n                                \n                            elif (\"<\" in slab_symbol)and(\"=\" in slab_symbol):\n                                if(float(target_achieved_percentage)<=float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n                                    \n                            elif \">\" in slab_symbol:\n                                if(float(target_achieved_percentage)>float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n            \n                            elif \"<\" in slab_symbol:\n                                if(float(target_achieved_percentage)<float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n                                    \n                            elif \"==\" in slab_symbol:\n                                if(float(target_achieved_percentage)==float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n                            elif \"-\" in slab_symbol:\n                                if float(slab_number1)<=float(target_achieved_percentage)<=float(slab_number2):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                      \n                    elif  employee_based_slab==\"Above\":\n                        get_incentive_slab_doc=frappe.get_doc('Incentive Slab',doc_incentive_slab)\n                        for slab_general in get_incentive_slab_doc.get(\"first_slab_if_above\"):\n                            slab_symbol=slab_general.symbol\n                            slab_number1=slab_general.number1\n                            slab_number2=slab_general.number2\n                            \n                            if (\">\" in slab_symbol)and(\"=\" in slab_symbol):\n                                if(float(target_achieved_percentage)>=float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                \n                                \n                            elif (\"<\" in slab_symbol)and(\"=\" in slab_symbol):\n                                if(float(target_achieved_percentage)<=float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n                                    \n                            elif \">\" in slab_symbol:\n                                if(float(target_achieved_percentage)>float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n            \n                            elif \"<\" in slab_symbol:\n                                if(float(target_achieved_percentage)<float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n                                    \n                            elif \"==\" in slab_symbol:\n                                if(float(target_achieved_percentage)==float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n                            elif \"-\" in slab_symbol:\n                                if float(slab_number1)<=float(target_achieved_percentage)<=float(slab_number2):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value  \n                                    incentive_value_full=slab_general.incentive\n                      \n                    elif  employee_based_slab==\"Below\":\n                        get_incentive_slab_doc=frappe.get_doc('Incentive Slab',doc_incentive_slab)\n                        for slab_general in get_incentive_slab_doc.get(\"first_slab_if_below\"):\n                            slab_symbol=slab_general.symbol\n                            slab_number1=slab_general.number1\n                            slab_number2=slab_general.number2\n                            \n                            if (\">\" in slab_symbol)and(\"=\" in slab_symbol):\n                                if(float(target_achieved_percentage)>=float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                \n                                \n                            elif (\"<\" in slab_symbol)and(\"=\" in slab_symbol):\n                                if(float(target_achieved_percentage)<=float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n                                    \n                            elif \">\" in slab_symbol:\n                                if(float(target_achieved_percentage)>float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n            \n                            elif \"<\" in slab_symbol:\n                                if(float(target_achieved_percentage)<float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n                                    \n                            elif \"==\" in slab_symbol:\n                                if(float(target_achieved_percentage)==float(slab_number1)):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value\n                                    incentive_value_full=slab_general.incentive\n                                    \n                            elif \"-\" in slab_symbol:\n                                if float(slab_number1)<=float(target_achieved_percentage)<=float(slab_number2):\n                                    percentage=slab_general.percentage\n                                    incentive_value=slab_general.incentive_value   \n                                    incentive_value_full=slab_general.incentive\n             \n                    if incentive_value !=\" \":\n                        if float(target_achieved_percentage)>=100:\n                            if percentage==\"%\":\n                                incentive=float(premium_point)*float(incentive_value)/100\n                            else:\n                                incentive=float(premium_point)+float(incentive_value)\n                        else:\n                            if percentage==\"%\":\n                                incentive=float(total_sale)*float(incentive_value)/100\n                            else:\n                                incentive=float(total_sale)+float(incentive_value)\n    \n                    if  incentive !=0:\n                            if doc_last_incentive !=\" \":    \n                                frappe.db.set_value('Incentive',doc_last_incentive,{'active':0})\n                            else:\n                                for i in frappe.db.get_list('Incentive',filters={'active':1,'release_incentive':1,\"last_released\":1}):\n                                    doc_last_incentive=i.name\n                                    frappe.db.set_value('Incentive',doc_last_incentive,{'active':0})\n                else:\n                        \n                        if doc_last_incentive !=\" \":    \n                            frappe.db.set_value('Incentive',doc_last_incentive,{'active':0})\n                        else:\n                            for i in frappe.db.get_list('Incentive',filters={'active':1,'release_incentive':1,\"last_released\":1}):\n                                doc_last_incentive=i.name\n                                frappe.db.set_value('Incentive',doc_last_incentive,{'active':0})\n\n    H=str(doc_target_name)\n    I=str(doc_incentive_slab)\n    K=str(incentive)\n    L=str(target_achieved_percentage)\n    M=str(total_sale)\n    N=str(premium_point)\n    O=str(doc_incentive_last_month_percentage)\n    P=str(percentage)\n    Q=str(cumulative_grand_total)\n    R=str(incentive_value)\n    S=str(cumulative_received_amount)\n    T=str(cumulative_outstanding)\n    \n    \n    return [H,I,K,L,M,N,O,P,Q,R,S,T]\n    # return [R,H,I,K,L,M,N,O,P,Q]\n    # # return [R]\n\ndef incentive_calculation_based_on_second_slab(x2,x3,x9,e3,e5):\n    doc_incentive_slab=x2\n    incentive1=x3\n    cumulative_grand_total=x9\n    employee=e3\n    emp_designation=e5\n    incentive_value=\" \"\n    incentive2=0\n    percentage=0\n    n=0\n    member_percentage=0\n    v=0\n    team_perfomance_percentage=0\n    total_incentive=0\n    team_members1=[]\n    team_members2=[]\n    total_members=[]\n\n    if emp_designation==\"Marketing Officer\":\n        for area in frappe.db.get_list('Assign Sale Area',filters={'marketing_officer1':employee},fields=[\"sales_officer1\"]):\n            team_members1.append(area.sales_officer1)\n            \n    elif emp_designation==\"Area Sales Manager\":\n        for area in frappe.db.get_list('Assign Sale Area',filters={'area_sales_manager1':employee},fields=[\"sales_officer1\"]):\n            team_members1.append(area.sales_officer1)\n            \n        # for area in frappe.db.get_list('Assign Sale Area',filters={'area_sales_manager1':employee},fields=[\"marketing_officer1\"]):\n        #     team_members1.append(area.marketing_officer1)\n            \n    elif emp_designation==\"Marketing Supervisor\":\n        for area in frappe.db.get_list('Assign Sale Area',fields=[\"marketing_officer1\"]):\n            team_members1.append(area.marketing_officer1)\n            \n    elif emp_designation==\"Sales Manager\":\n        for area in frappe.db.get_list('Assign Sale Area',fields=[\"area_sales_manager1\"]):\n            team_members1.append(area.area_sales_manager1)\n            \n    elif emp_designation==\"Sales Admin\":\n        for area in frappe.db.get_list('Assign Sale Area',fields=[\"area_sales_manager1\"]):\n            team_members1.append(area.area_sales_manager1)\n    \n    \n    # frappe.msgprint(\"emp_designation  \"+str(emp_designation))\n       \n    if team_members1:\n        team_members1=set(team_members1)\n        n=len(team_members1)\n\n        for x in team_members1:\n         \n            v=frappe.db.get_value(\"Incentive\",{\"active\":1,\"employee\":x},[\"achieved_percentage\"])\n            if v:\n                if int(v)>0:\n                   \n                    member_percentage=int(member_percentage)+int(v)\n     \n    if member_percentage>0:\n        team_perfomance_percentage=(member_percentage*100)/(n*100)\n        \n        \n\n    if team_perfomance_percentage>0:\n        get_incentive_slab_doc=frappe.get_doc('Incentive Slab',doc_incentive_slab)\n        for slab2 in get_incentive_slab_doc.get(\"second_slab\"):\n            slab_symbol=slab2.symbol\n            slab_number1=slab2.number1\n            slab_number2=slab2.number2\n        \n            if (\">\" in slab_symbol)and(\"=\" in slab_symbol):\n                if(float(team_perfomance_percentage)>=float(slab_number1)):\n                    percentage=slab2.percentage\n                    incentive_value=slab2.incentive_value\n                    incentive_value_full=slab2.incentive\n                            \n                            \n            elif (\"<\" in slab_symbol)and(\"=\" in slab_symbol):\n                if(float(team_perfomance_percentage)<=float(slab_number1)):\n                    percentage=slab2.percentage\n                    incentive_value=slab2.incentive_value\n                    incentive_value_full=slab2.incentive\n                                \n                \n            elif \">\" in slab_symbol:\n                if(float(team_perfomance_percentage)>float(slab_number1)):\n                    percentage=slab2.percentage\n                    incentive_value=slab2.incentive_value\n                    incentive_value_full=slab2.incentive\n                                \n        \n            elif \"<\" in slab_symbol:\n                if(float(team_perfomance_percentage)<float(slab_number1)):\n                    percentage=slab2.percentage\n                    incentive_value=slab2.incentive_value\n                    incentive_value_full=slab2.incentive\n                                \n                                \n            elif \"==\" in slab_symbol:\n                if(float(team_perfomance_percentage)==float(slab_number1)):\n                    percentage=slab2.percentage\n                    incentive_value=slab2.incentive_value\n                    incentive_value_full=slab2.incentive\n                                \n            elif \"-\" in slab_symbol:\n                if float(slab_number1)<=float(team_perfomance_percentage)<=float(slab_number2):\n                    percentage=slab2.percentage\n                    incentive_value=slab2.incentive_value\n                    incentive_value_full=slab2.incentive\n\n\n    if incentive_value !=\" \":\n        if percentage==\"%\":\n            incentive2=(float(cumulative_grand_total)*float(incentive_value))/100\n        else:\n            incentive2=float(incentive_value)\n            \n            \n    if float(incentive1)>0 and float(incentive2)>0:\n        total_incentive=float(incentive1)+float(incentive2)\n    elif float(incentive1)>0:\n        total_incentive=float(incentive1)\n    elif float(incentive2)>0:\n        total_incentive=float(incentive2)\n    else:\n        total_incentive=0\n        \n   \n    # frappe.msgprint(\"incentive2  \"+str(incentive2))\n    # frappe.msgprint(\"incentive_value  \"+str(incentive_value))\n    # frappe.msgprint(\"total_incentive  \"+str(total_incentive))\n    # frappe.msgprint(\"percentage  \"+str(percentage))\n    # frappe.msgprint(\"team_perfomance_percentage  \"+str(team_perfomance_percentage))\n\n            \n    return [incentive2,incentive_value,total_incentive,percentage,team_perfomance_percentage]\n\ndef create_incentive_doc(x1,x2,x3,x4,x5,x6,x7,x8,e1,e2,e3,e4,y1,y2,t1,y3,y4,x9,x10,x11,x12):\n    \n    cumulative_grand_total=x9\n    cumulative_received_amount=x11\n    cumulative_outstanding=x12\n    \n    doc_target_name=x1\n    doc_incentive_slab1=x2\n    incentive1=x3\n    target_achieved_percentage1=x4\n    target_achieved_percentage2=y4\n    # x9\n    incentive_value1=x10\n    percentage1=x8\n    total_sale=x5\n    premium_point=x6\n    doc_incentive_last_month_percentage=x7\n    doc_target_name=e1\n    doc_target=e2\n    employee=e3\n    employee_name=e4\n    incentive2=y1\n    incentive_value2=y2\n    percentage2=y3\n\n\n    if doc_target_name !=\" \" and doc_incentive_slab1!=\" \":    \n        if y1==\" \":\n                total_incentive=incentive1\n        else:\n                total_incentive=t1\n            \n                \n        f_total_incentive=float(total_incentive)\n            # f_incentive1=float(incentive1)\n            # f_incentive2=float(incentive2)\n            # f_target_achieved_percentage2=float(target_achieved_percentage2)\n            # f_total_sale=float(total_sale)\n            # f_premium_point=float(premium_point)\n            # f_cumulative_grand_total=float(cumulative_grand_total)\n            # f_cumulative_received_amount=float(cumulative_received_amount)\n            # f_cumulative_outstanding=float(cumulative_outstanding)\n        \n        if total_incentive !=0:\n                # frappe.msgprint(\"doc_incentive_slab1  \"+str(doc_incentive_slab1))\n                doc_incentive1= frappe.get_doc({'doctype':'Incentive'})\n                doc_incentive1.target_id=doc_target_name\n                doc_incentive1.created_date=frappe.utils.now_datetime()\n                doc_incentive1.employee=employee\n                doc_incentive1.employee_name=employee_name\n                doc_incentive1.emp_id=employee\n                doc_incentive1.incentive_slab=doc_incentive_slab1\n                doc_incentive1.active=1\n                doc_incentive1.incentive_amount=round(f_total_incentive,2)\n                doc_incentive1.slab1_based_incentive=incentive1\n                doc_incentive1.slab2_based_incentive=incentive2\n                doc_incentive1.team_perfomance_percentage=target_achieved_percentage2\n                \n                \n                doc_incentive1.achieved_percentage=target_achieved_percentage1\n                doc_incentive1.total_sale=total_sale\n                doc_incentive1.premium_point=premium_point\n                doc_incentive1.last_month_percentage=doc_incentive_last_month_percentage\n                doc_incentive1.cumulative_grand_total=cumulative_grand_total\n                doc_incentive1.total_received_amount=cumulative_received_amount\n                doc_incentive1.total_outstanding=cumulative_outstanding\n                \n                doc_incentive1.slab_point1=str(incentive_value1)+str(percentage1)\n                doc_incentive1.slab_point2=str(incentive_value2)+str(percentage2)\n                doc_incentive1.sales_invoice=invoice\n                doc_incentive1.grand_total=invoice_grand_total\n                doc_incentive1.received_amount=invoice_total_advance\n                doc_incentive1.outstanding_amount=invoice_outstanding_amount\n                doc_incentive1.insert()\n    \n#------------------------------------------------END OF FUNCTION DEFINE------------------------------------------------------------------#\n\n    \n\n\n# ------------------------------------------------MAIN FUNCTION--------------------------------------------------------------------------#\n\ninvoice=frappe.form_dict.invoice\ninvoice_posting_date=frappe.form_dict.posting_date\ninvoice_grand_total=frappe.form_dict.grand_total\ninvoice_total_advance=frappe.form_dict.total_advance\ninvoice_outstanding_amount=frappe.form_dict.outstanding_amount\n\n\ndoc_invoice=frappe.get_doc('Sales Invoice',invoice)\ndoc_sales_officer=frappe.db.get_value('Sales Invoice',invoice,'sales_executive')\ndoc_marketing_officer=frappe.db.get_value('Sales Invoice',invoice,'marketing_team_member')\ndoc_area_sales_manager=frappe.db.get_value('Sales Invoice',invoice,'area_sales_manager')\ndoc_marketing_supervisor=frappe.db.get_value('Sales Invoice',invoice,'marketing_head')\ndoc_sales_manager=frappe.db.get_value('Sales Invoice',invoice,'sales_manager')\ndoc_sales_admin=frappe.db.get_value('Company',\"Lamit\",'sales_admin')\n\nfor item in doc_invoice.get(\"items\"):\n   \n    if item.incentive:\n        if float(item.incentive)>0:\n            amount1=float(item.amount)*float(item.incentive)\n            premium_point=float(premium_point)+float(amount1)\n            common_premium_point=premium_point\n            \n            if float(item.incentive)>1:\n                total_sale=float(total_sale)+float(item.amount)\n            else:\n                total_sale=float(total_sale)+float(amount1)\n            common_total_sale=total_sale\n            \n\n        #----------SALES OFFICER INCENTIVE CALCULATION START-------------------#\n        \nemployee=doc_sales_officer\n\nemployee_details=[]\nemployee_details=select_employee_details(employee)\n\ne1=employee_details[0]\ne2=employee_details[1]\ne3=employee_details[2]\ne4=employee_details[3]\ne5=employee_details[4]\n\n\nA=doc_incentive_last_month_percentage\nB=doc_last_incentive\nC=doc_incentive_premium_point\nD=doc_incentive_total_sale\nE=doc_incentive_cumulative_grand_total\nF=doc_incentive_total_received_amount\nG=doc_incentive_total_outstanding\n\n  # INCENTIVE CALCULATION BASED ON FIRST SLAB\nfinal_values=[]\nfinal_values=incentive_calculation_based_on_first_slab(A,B,C,D,E,F,G,e1,e2,e3,e4,e5)\n\nx1=final_values[0]\nx2=final_values[1]\nx3=final_values[2]\nx4=final_values[3]\nx5=final_values[4]\nx6=final_values[5]\nx7=final_values[6]\nx8=final_values[7]\nx9=final_values[8]\nx10=final_values[9]\nx11=final_values[10]\nx12=final_values[11]\n\ny1=\" \"\ny2=\" \"\nt1=\" \"\ny3=\" \"\ny4=\" \"\n\n\n#     # CREATE INCENTIVE DOC OF SALES OFFICER\ncreate_incentive_doc(x1,x2,x3,x4,x5,x6,x7,x8,e1,e2,e3,e4,y1,y2,y3,t1,y4,x9,x10,x11,x12)\n\n#         #----------SALES OFFICER END--------------------#\n\ndoc_target_name=\" \" \ndoc_incentive_last_month_percentage=\" \"\npremium_point=0\ntotal_sale=0\npremium_point_achieved=0\ncumulative_grand_total=0\ncumulative_received_amount=0\ncumulative_outstanding=0\ntarget_achieved_percentage=0\ndoc_incentive_slab=\" \"\nemployee_based_slab=\" \"\npercentage=\" \"\nincentive=0\nincentive_value=\" \"\nincentive_value_full=\" \"\ndoc_last_incentive=\" \"\n    \n    \ndoc_target=\" \"\nemployee=\" \"\nemployee_name=\" \"\ndoc_incentive_slab=\" \"\ndoc_last_incentive=\" \"\ndoc_incentive_total_sale=\" \"\ndoc_incentive_premium_point=\" \"\ndoc_incentive_cumulative_grand_total=\" \"\ndoc_incentive_total_received_amount=\" \"\ndoc_incentive_total_outstanding=\" \"\ndoc_incentive_last_month_percentage=\" \"\nslab_doc_above_or_below=\" \"\nget_incentive_slab_doc=\" \"\nslab_symbol=\" \"\nslab_number1=\" \"\nslab_number2=\" \"\n\n\n        #-----------------------MARKETING OFFICER INCENTIVE CALCULATION START-------------------------#\n# clear_variable()\n\nemployee=doc_marketing_officer\nemployee_details=[]\nemployee_details=select_employee_details(employee)\n\ne1=employee_details[0]\ne2=employee_details[1]\ne3=employee_details[2]\ne4=employee_details[3]\ne5=employee_details[4]\n\nA=doc_incentive_last_month_percentage\nB=doc_last_incentive\nC=doc_incentive_premium_point\nD=doc_incentive_total_sale\nE=doc_incentive_cumulative_grand_total\nF=doc_incentive_total_received_amount\nG=doc_incentive_total_outstanding\n\n    # INCENTIVE CALCULATION BASED ON FIRST SLAB\nfinal_values=[]\nfinal_values=incentive_calculation_based_on_first_slab(A,B,C,D,E,F,G,e1,e2,e3,e4,e5)\n\nx1=final_values[0]\nx2=final_values[1]\nx3=final_values[2]\nx4=final_values[3]\nx5=final_values[4]\nx6=final_values[5]\nx7=final_values[6]\nx8=final_values[7]\nx9=final_values[8]\nx10=final_values[9]\nx11=final_values[10]\nx12=final_values[11]\n\n # INCENTIVE CALCULATION BASED ON SECOND SLAB\nincentive_slab2_based=[]\nincentive_slab2_based=incentive_calculation_based_on_second_slab(x2,x3,x9,e3,e5)\n\ny1=incentive_slab2_based[0]\ny2=incentive_slab2_based[1]\nt1=incentive_slab2_based[2]\ny3=incentive_slab2_based[3]\ny4=incentive_slab2_based[4]\n\n# frappe.msgprint(\"y1  \"+str(y1))\n# frappe.msgprint(\"y2  \"+str(y2))\n# frappe.msgprint(\"t1  \"+str(t1))\n# frappe.msgprint(\"y3  \"+str(y3))\n# frappe.msgprint(\"y4  \"+str(y4))\n\n     # CREATE INCENTIVE DOC OF MARKETING OFFICER\ncreate_incentive_doc(x1,x2,x3,x4,x5,x6,x7,x8,e1,e2,e3,e4,y1,y2,t1,y3,y4,x9,x10,x11,x12)\n        \n  #     -----------------------MARKETING OFFICER INCENTIVE CALCULATION END-------------------------#\n    \n\n     #-----------------------ASM INCENTIVE CALCULATION START-------------------------#\ndoc_target_name=\" \" \ndoc_incentive_last_month_percentage=\" \"\npremium_point=0\ntotal_sale=0\npremium_point_achieved=0\ncumulative_grand_total=0\ncumulative_received_amount=0\ncumulative_outstanding=0\ntarget_achieved_percentage=0\ndoc_incentive_slab=\" \"\nemployee_based_slab=\" \"\npercentage=\" \"\nincentive=0\nincentive_value=\" \"\nincentive_value_full=\" \"\ndoc_last_incentive=\" \"\n    \n    \ndoc_target=\" \"\nemployee=\" \"\nemployee_name=\" \"\ndoc_incentive_slab=\" \"\ndoc_last_incentive=\" \"\ndoc_incentive_total_sale=\" \"\ndoc_incentive_premium_point=\" \"\ndoc_incentive_cumulative_grand_total=\" \"\ndoc_incentive_total_received_amount=\" \"\ndoc_incentive_total_outstanding=\" \"\ndoc_incentive_last_month_percentage=\" \"\nslab_doc_above_or_below=\" \"\nget_incentive_slab_doc=\" \"\nslab_symbol=\" \"\nslab_number1=\" \"\nslab_number2=\" \"\n\n\n# clear_variable()\n\nemployee=doc_area_sales_manager\nemployee_details=[]\nemployee_details=select_employee_details(employee)\n\ne1=employee_details[0]\ne2=employee_details[1]\ne3=employee_details[2]\ne4=employee_details[3]\ne5=employee_details[4]\n\nA=doc_incentive_last_month_percentage\nB=doc_last_incentive\nC=doc_incentive_premium_point\nD=doc_incentive_total_sale\nE=doc_incentive_cumulative_grand_total\nF=doc_incentive_total_received_amount\nG=doc_incentive_total_outstanding\n\n    # INCENTIVE CALCULATION BASED ON FIRST SLAB\nfinal_values=[]\nfinal_values=incentive_calculation_based_on_first_slab(A,B,C,D,E,F,G,e1,e2,e3,e4,e5)\n\nx1=final_values[0]\nx2=final_values[1]\nx3=final_values[2]\nx4=final_values[3]\nx5=final_values[4]\nx6=final_values[5]\nx7=final_values[6]\nx8=final_values[7]\nx9=final_values[8]\nx10=final_values[9]\nx11=final_values[10]\nx12=final_values[11]\n\n # INCENTIVE CALCULATION BASED ON SECOND SLAB\nincentive_slab2_based=[]\nincentive_slab2_based=incentive_calculation_based_on_second_slab(x2,x3,x9,e3,e5)\n\ny1=incentive_slab2_based[0]\ny2=incentive_slab2_based[1]\nt1=incentive_slab2_based[2]\ny3=incentive_slab2_based[3]\ny4=incentive_slab2_based[4]\n\n     # CREATE INCENTIVE DOC OF ASM\ncreate_incentive_doc(x1,x2,x3,x4,x5,x6,x7,x8,e1,e2,e3,e4,y1,y2,t1,y3,y4,x9,x10,x11,x12)\n        \n        #-----------------------ASM INCENTIVE CALCULATION END-------------------------#\n    \n\n\n        #-----------------------MARKETING SUPERVISOR INCENTIVE CALCULATION START-------------------------#\ndoc_target_name=\" \" \ndoc_incentive_last_month_percentage=\" \"\npremium_point=0\ntotal_sale=0\npremium_point_achieved=0\ncumulative_grand_total=0\ncumulative_received_amount=0\ncumulative_outstanding=0\ntarget_achieved_percentage=0\ndoc_incentive_slab=\" \"\nemployee_based_slab=\" \"\npercentage=\" \"\nincentive=0\nincentive_value=\" \"\nincentive_value_full=\" \"\ndoc_last_incentive=\" \"\n\ndoc_target=\" \"\nemployee=\" \"\nemployee_name=\" \"\ndoc_incentive_slab=\" \"\ndoc_last_incentive=\" \"\ndoc_incentive_total_sale=\" \"\ndoc_incentive_premium_point=\" \"\ndoc_incentive_cumulative_grand_total=\" \"\ndoc_incentive_total_received_amount=\" \"\ndoc_incentive_total_outstanding=\" \"\ndoc_incentive_last_month_percentage=\" \"\nslab_doc_above_or_below=\" \"\nget_incentive_slab_doc=\" \"\nslab_symbol=\" \"\nslab_number1=\" \"\nslab_number2=\" \"\n\n\n# # # clear_variable()\n\nemployee=doc_marketing_supervisor\nemployee_details=[]\nemployee_details=select_employee_details(employee)\n\ne1=employee_details[0]\ne2=employee_details[1]\ne3=employee_details[2]\ne4=employee_details[3]\ne5=employee_details[4]\n\nA=doc_incentive_last_month_percentage\nB=doc_last_incentive\nC=doc_incentive_premium_point\nD=doc_incentive_total_sale\nE=doc_incentive_cumulative_grand_total\nF=doc_incentive_total_received_amount\nG=doc_incentive_total_outstanding\n\n    # INCENTIVE CALCULATION BASED ON FIRST SLAB\nfinal_values=[]\nfinal_values=incentive_calculation_based_on_first_slab(A,B,C,D,E,F,G,e1,e2,e3,e4,e5)\n\nx1=final_values[0]\nx2=final_values[1]\nx3=final_values[2]\nx4=final_values[3]\nx5=final_values[4]\nx6=final_values[5]\nx7=final_values[6]\nx8=final_values[7]\nx9=final_values[8]\nx10=final_values[9]\nx11=final_values[10]\nx12=final_values[11]\n\n # INCENTIVE CALCULATION BASED ON SECOND SLAB\nincentive_slab2_based=[]\nincentive_slab2_based=incentive_calculation_based_on_second_slab(x2,x3,x9,e3,e5)\n\ny1=incentive_slab2_based[0]\ny2=incentive_slab2_based[1]\nt1=incentive_slab2_based[2]\ny3=incentive_slab2_based[3]\ny4=incentive_slab2_based[4]\n\n    #  CREATE INCENTIVE DOC OF MARKETING SUPERVISOR\ncreate_incentive_doc(x1,x2,x3,x4,x5,x6,x7,x8,e1,e2,e3,e4,y1,y2,t1,y3,y4,x9,x10,x11,x12)\n\n        #-----------------------MARKETING SUPERVISOR INCENTIVE CALCULATION END-------------------------#\n\n\n        #-----------------------SALES MANAGER INCENTIVE CALCULATION START-------------------------#\ndoc_target_name=\" \" \ndoc_incentive_last_month_percentage=\" \"\npremium_point=0\ntotal_sale=0\npremium_point_achieved=0\ncumulative_grand_total=0\ncumulative_received_amount=0\ncumulative_outstanding=0\ntarget_achieved_percentage=0\ndoc_incentive_slab=\" \"\nemployee_based_slab=\" \"\npercentage=\" \"\nincentive=0\nincentive_value=\" \"\nincentive_value_full=\" \"\ndoc_last_incentive=\" \"\n\ndoc_target=\" \"\nemployee=\" \"\nemployee_name=\" \"\ndoc_incentive_slab=\" \"\ndoc_target_name=\" \"\ndoc_last_incentive=\" \"\ndoc_incentive_total_sale=\" \"\ndoc_incentive_premium_point=\" \"\ndoc_incentive_cumulative_grand_total=\" \"\ndoc_incentive_total_received_amount=\" \"\ndoc_incentive_total_outstanding=\" \"\ndoc_incentive_last_month_percentage=\" \"\nslab_doc_above_or_below=\" \"\nget_incentive_slab_doc=\" \"\nslab_symbol=\" \"\nslab_number1=\" \"\nslab_number2=\" \"\n\n# # # clear_variable()\n\nemployee=doc_sales_manager\nemployee_details=[]\nemployee_details=select_employee_details(employee)\n\ne1=employee_details[0]\ne2=employee_details[1]\ne3=employee_details[2]\ne4=employee_details[3]\ne5=employee_details[4]\n\nA=doc_incentive_last_month_percentage\nB=doc_last_incentive\nC=doc_incentive_premium_point\nD=doc_incentive_total_sale\nE=doc_incentive_cumulative_grand_total\nF=doc_incentive_total_received_amount\nG=doc_incentive_total_outstanding\n\n    # INCENTIVE CALCULATION BASED ON FIRST SLAB\nfinal_values=[]\nfinal_values=incentive_calculation_based_on_first_slab(A,B,C,D,E,F,G,e1,e2,e3,e4,e5)\n\nx1=final_values[0]\nx2=final_values[1]\nx3=final_values[2]\nx4=final_values[3]\nx5=final_values[4]\nx6=final_values[5]\nx7=final_values[6]\nx8=final_values[7]\nx9=final_values[8]\nx10=final_values[9]\nx11=final_values[10]\nx12=final_values[11]\n\n # INCENTIVE CALCULATION BASED ON SECOND SLAB\nincentive_slab2_based=[]\nincentive_slab2_based=incentive_calculation_based_on_second_slab(x2,x3,x9,e3,e5)\n\ny1=incentive_slab2_based[0]\ny2=incentive_slab2_based[1]\nt1=incentive_slab2_based[2]\ny3=incentive_slab2_based[3]\ny4=incentive_slab2_based[4]\n\n    #  CREATE INCENTIVE DOC OF SALES MANAGER\ncreate_incentive_doc(x1,x2,x3,x4,x5,x6,x7,x8,e1,e2,e3,e4,y1,y2,t1,y3,y4,x9,x10,x11,x12)\n\n      #-----------------------SALES MANAGER INCENTIVE CALCULATION END-------------------------#            \n       \n      #-----------------------SALES ADMIN INCENTIVE CALCULATION START-------------------------#\ndoc_target_name=\" \" \ndoc_incentive_last_month_percentage=\" \"\npremium_point=0\ntotal_sale=0\npremium_point_achieved=0\ncumulative_grand_total=0\ncumulative_received_amount=0\ncumulative_outstanding=0\ntarget_achieved_percentage=0\ndoc_incentive_slab=\" \"\nemployee_based_slab=\" \"\npercentage=\" \"\nincentive=0\nincentive_value=\" \"\nincentive_value_full=\" \"\ndoc_last_incentive=\" \"    \n\ndoc_target=\" \"\nemployee=\" \"\nemployee_name=\" \"\ndoc_incentive_slab=\" \"\ndoc_target_name=\" \"\ndoc_last_incentive=\" \"\ndoc_incentive_total_sale=\" \"\ndoc_incentive_premium_point=\" \"\ndoc_incentive_cumulative_grand_total=\" \"\ndoc_incentive_total_received_amount=\" \"\ndoc_incentive_total_outstanding=\" \"\ndoc_incentive_last_month_percentage=\" \"\nslab_doc_above_or_below=\" \"\nget_incentive_slab_doc=\" \"\nslab_symbol=\" \"\nslab_number1=\" \"\nslab_number2=\" \"\n\n# # # clear_variable()\n\nemployee=doc_sales_admin\nemployee_details=[]\nemployee_details=select_employee_details(employee)\n\ne1=employee_details[0]\ne2=employee_details[1]\ne3=employee_details[2]\ne4=employee_details[3]\ne5=employee_details[4]\n \nA=doc_incentive_last_month_percentage\nB=doc_last_incentive\nC=doc_incentive_premium_point\nD=doc_incentive_total_sale\nE=doc_incentive_cumulative_grand_total\nF=doc_incentive_total_received_amount\nG=doc_incentive_total_outstanding\n\n  # INCENTIVE CALCULATION BASED ON FIRST SLAB\nfinal_values=[]\nfinal_values=incentive_calculation_based_on_first_slab(A,B,C,D,E,F,G,e1,e2,e3,e4,e5)\n\n\nx1=final_values[0]\nx2=final_values[1]\nx3=final_values[2]\nx4=final_values[3]\nx5=final_values[4]\nx6=final_values[5]\nx7=final_values[6]\nx8=final_values[7]\nx9=final_values[8]\nx10=final_values[9]\nx11=final_values[10]\nx12=final_values[11]\n\n # INCENTIVE CALCULATION BASED ON SECOND SLAB\nincentive_slab2_based=[]\nincentive_slab2_based=incentive_calculation_based_on_second_slab(x2,x3,x9,e3,e5)\n\ny1=incentive_slab2_based[0]\ny2=incentive_slab2_based[1]\nt1=incentive_slab2_based[2]\ny3=incentive_slab2_based[3]\ny4=incentive_slab2_based[4]\n\n    #  CREATE INCENTIVE DOC OF SALES ADMIN\ncreate_incentive_doc(x1,x2,x3,x4,x5,x6,x7,x8,e1,e2,e3,e4,y1,y2,t1,y3,y4,x9,x10,x11,x12)\n\n      #-----------------------SALES ADMIN INCENTIVE CALCULATION END-------------------------#      \n\n\n\n\n\n\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "add_release_details_into_incentive_doc",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-04-18 10:48:56.812073",
  "module": null,
  "name": "add_release_details_into_incentive_doc",
  "reference_doctype": null,
  "script": "x = frappe.get_doc('Incentive',frappe.form_dict.incentive_id)\nx.append(\"incentive_release\", \n{\n        \"outstanding_amount\":frappe.form_dict.outstanding_amount,\n        \"released_amount\":frappe.form_dict.released_amount,\n})\nx.save()\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-31 15:41:29.128734",
  "module": null,
  "name": "Experience",
  "reference_doctype": "Experiance Certificate",
  "script": "\nt=frappe.db.count('Experiance Certificate')\n\nif t==0:\n   \n    doc.number=1\n    doc.series = \"LG/LR/HR/EC\"+\"-\"+str(doc.number)+\"/\"+\"0\"+str(doc.month)+\"-\"+str(doc.year)\n    \n    frappe.msgprint(\"Experiance Certificate Send Successfully\")\n    \nelse:\n    \n    t = frappe.get_last_doc('Experiance Certificate')\n\n    \n    \n    total=int(t.number)+1\n    doc.number=total\n    doc.series = \"LG/LR/HR/EC\"+\"-\"+str(total)+\"/\"+\"0\"+str(doc.month)+\"-\"+str(doc.year)\n    frappe.msgprint(\"Experiance Certificate Send Successfully\")\n ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-08-31 15:45:27.123374",
  "module": null,
  "name": "Experiance Certificate",
  "reference_doctype": "Experiance Certificate",
  "script": "\n# doc1 = frappe.get_doc('Employee', doc.employee)\n# # frappe.msgprint(doc1.name)\n# # doc.title = 'Test'\n# doc1.experience_certificate1=doc.name\ndoc1.create_certificate=1\ndoc1.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-05-02 11:50:59.226266",
  "module": null,
  "name": "GL Entry - Before Insert",
  "reference_doctype": "GL Entry",
  "script": "# for t in frappe.db.get_list('Account'):\n#     doc1=frappe.get_doc('Account',t.name)\n#     doc1.super_stockist=doc1.company\n#     doc1.save(ignore_permissions=True)\n    \n\n\ndoc.super_stockist=doc.company",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-05-29 19:48:55.922498",
  "module": null,
  "name": "product1",
  "reference_doctype": "Item",
  "script": "if doc.variant_of:\n\n    \n    for t in doc.attributes:\n        # frappe.msgprint(t.attribute_value)\n        doc.color=t.attribute_value\n    \n        \n    doc1=frappe.get_doc(\"Item\",doc.variant_of)\n    # frappe.msgprint(doc1.item_code)\n    \n    doc.product_brand=doc1.product_brand\n    doc.product_series=doc1.product_series\n    doc.product_type=doc1.product_type\n    doc.cost_of_the_price=doc1.cost_of_the_price\n    doc.buying_price=doc1.buying_price\n    doc.sub_product=doc1.sub_product\n    doc.product_quality=doc1.product_quality\n    doc.incentive=doc1.incentive\n    doc.size=doc1.size\n    doc.weight=doc1.weight\n    doc.pieces_for_every_square=doc1.pieces_for_every_square\n    doc.european_product_value=doc1.european_product_value\n    doc.super_stockist_price=doc1.super_stockist_price\n    doc.dealer_delivery_price=doc1.dealer_delivery_price\n    doc.sub_dealer_price=doc1.sub_dealer_price\n    doc.mop=doc1.mop\n    doc.mrp=doc1.mrp\n    doc.tax_percentage=doc1.tax_percentage\n    \n    \n    \n    if doc.is_new():\n        if doc.has_variants:\n    \n    \n            for i in frappe.get_list(\"Company\",filters={'name':('not in',('Lamit'))}):\n        \n                    warehouse=frappe.db.get_value('Company',i.name,'warehouse')\n                    row=doc.append('item_defaults',{})\n                                \n                    row.company=i.name\n                    row.default_warehouse=warehouse\n\n        \n\n\n\n\n# if doc.is_new():\n#     if doc.has_variants==1:\n        \n#         for i in frappe.get_list(\"Company\",filters={'name':('not in',('Lamit'))}):\n\n#             warehouse=frappe.db.get_value('Company',i.name,'warehouse')\n#             row=doc.append('item_defaults',{})\n                        \n#             row.company=i.name\n#             row.default_warehouse=warehouse\n            \n\n\n# if doc.has_variants==1:\n#         # frappe.msgprint(\"P\")\n#     for i in frappe.get_list(\"Company\"):\n#             # frappe.msgprint(i.name)\n#         warehouse=frappe.db.get_value('Company',i.name,'warehouse')\n            \n#         # doc.item_defaults = []\n#         # refresh_field(\"item_defaults\")\n        \n#         frappe.msgprint(warehouse)\n            \n#         row=doc.append('item_defaults',{})\n                        \n#         row.company=i.name\n#         row.default_warehouse=warehouse\n    \n    \n\n\n\n        \n\n\n        \n       ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2023-05-29 19:51:53.344861",
  "module": null,
  "name": "Product Price",
  "reference_doctype": "Item",
  "script": "\nif doc.variant_of:\n    if doc.european_product_value==\"1\":\n            # frappe.msgprint(\"aftersave1\")\n            if doc.buying_price:\n                if frappe.db.exists(\"Item Price\", {\"item_code\":doc.name,\"price_list\":\"Lamit Buying\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":doc.name,\"price_list\":\"Lamit Buying\"}, ['name'])\n                    \n                    doc2 = frappe.get_doc('Item Price',existing_docname)\n                    doc2.price_list_rate =doc.buying_price\n                    doc2.save()\n                else:\n        \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =doc.name,\n                    doc2.price_list =\"Lamit Buying\",\n                    doc2.buying =1,\n                    doc2.price_list_rate =doc.buying_price,\n                    doc2.insert()\n                \n            if doc.mrp:\n                if frappe.db.exists(\"Item Price\", {\"item_code\":doc.name,\"price_list\":\"PTC\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":doc.name,\"price_list\":\"PTC\"}, ['name'])\n                    \n                    doc2 = frappe.get_doc('Item Price',existing_docname)\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.price_list_rate =doc.mrp\n                    doc2.save()\n                else:\n                    \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =doc.name\n                    doc2.price_list =\"PTC\"\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.price_list_rate =doc.mrp\n                    doc2.insert()\n    else:\n            if doc.buying_price:\n                if frappe.db.exists(\"Item Price\", {\"item_code\":doc.name,\"price_list\":\"Lamit Buying\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":doc.name,\"price_list\":\"Lamit Buying\"}, ['name'])\n                    \n                    doc2 = frappe.get_doc('Item Price',existing_docname)\n                    doc2.price_list_rate =doc.buying_price\n                    doc2.save()\n                else:\n        \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =doc.name\n                    doc2.price_list =\"Lamit Buying\"\n                    doc2.buying =1\n                    doc2.price_list_rate =doc.buying_price\n                    doc2.insert()\n                \n            if doc.mrp:\n                if frappe.db.exists(\"Item Price\", {\"item_code\":doc.name,\"price_list\":\"PTC\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":doc.name,\"price_list\":\"PTC\"}, ['name'])\n                    \n                    doc2 = frappe.get_doc('Item Price',existing_docname)\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.dealer_delivery_price =doc.dealer_delivery_price\n                    doc2.sub_dealer_price =doc.sub_dealer_price\n                    doc2.price_list_rate =doc.mrp\n                    doc2.mop =doc.mop\n                    doc2.save()\n                else:\n                    \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =doc.name\n                    doc2.price_list =\"PTC\"\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.dealer_delivery_price =doc.dealer_delivery_price\n                    doc2.sub_dealer_price =doc.sub_dealer_price\n                    doc2.price_list_rate =doc.mrp\n                    doc2.mop =doc.mop\n                    doc2.insert()\n                \n                \n            if doc.super_stockist_price:    \n                if frappe.db.exists(\"Item Price\", {\"item_code\":doc.name,\"price_list\":\"PTS\"}):\n                    existing_docname = frappe.db.get_value('Item Price\"', {\"item_code\":doc.name,\"price_list\":\"PTS\"}, ['name'])\n                    \n                    doc2 = frappe.get_doc('Item Price',existing_docname)\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.mop =doc.mop\n                    doc2.mrp =doc.mrp\n                    doc2.price_list_rate =doc.super_stockist_price\n                    doc2.save()\n                else:\n                    \n                    doc2 = frappe.new_doc('Item Price')\n                    doc2.item_code =doc.name\n                    doc2.price_list =\"PTS\"\n                    doc2.series =doc.product_series\n                    doc2.brands =doc.product_brand\n                    doc2.mop =doc.mop\n                    doc2.mrp =doc.mrp\n                    doc2.price_list_rate =doc.super_stockist_price\n                    doc2.insert()\n                \n                ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "event_frequency": "All",
  "modified": "2023-05-31 15:03:19.944255",
  "module": null,
  "name": "cancel Lamit PO",
  "reference_doctype": "Purchase Order",
  "script": "if doc.company==\"Lamit\":\n    # frappe.msgprint(\"M\")\n    for x in doc.items:\n    #  \n        if x.purchase_order_id:\n            # frappe.msgprint(x.name)\n           \n            doc1=frappe.get_doc(\"Purchase Order\",x.purchase_order_id)\n           \n            for y in doc1.items:\n                # frappe.msgprint(str(y.ordered))\n               \n                if x.name1==y.name1:\n                    # frappe.msgprint(y.name1)\n                   \n                    y.ordered=0\n    \n            doc1.save()\n               \n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-05-31 15:04:19.719041",
  "module": null,
  "name": "child table name",
  "reference_doctype": "Purchase Order",
  "script": "\nif not doc.company==\"Lamit\":\n    \n    doc.status1=\"Requested\"\n    # frappe.msgprint(\"M\")\n    for x in doc.items:\n    #   frappe.msgprint(x.name)\n       x.name1=x.name\n       x.purchase_order_id=doc.name\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save (Submitted Document)",
  "event_frequency": "All",
  "modified": "2023-05-31 15:05:02.404696",
  "module": null,
  "name": "purchase order",
  "reference_doctype": "Purchase Order",
  "script": "n=[]\ni=1\nj=0\n\nif not doc.company==\"Lamit\":\n    # doc.status1=\"Requested\"\n    # frappe.msgprint(\"M\")\n    for x in doc.items:\n        n.append(x.ordered)\n        \n        \n        # frappe.msgprint(str(n))\n        \n        if i in n:\n            if j in n:\n                doc.status1=\"Partialy Ordered\"\n                \n            else:\n                doc.status1=\"Fully Ordered\"\n        else:\n            doc.status1=\"Requested\"\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-05-31 15:06:51.920254",
  "module": null,
  "name": "update ordered in po",
  "reference_doctype": "Purchase Order",
  "script": "\nif doc.company==\"Lamit\":\n    # frappe.msgprint(\"M\")\n    for x in doc.items:\n    #  \n        if x.purchase_order_id:\n            # frappe.msgprint(x.name)\n           \n            doc1=frappe.get_doc(\"Purchase Order\",x.purchase_order_id)\n           \n            for y in doc1.items:\n                # frappe.msgprint(str(y.ordered))\n               \n                if x.name1==y.name1:\n                    # frappe.msgprint(y.name1)\n                   \n                    y.ordered=1\n    \n            doc1.save()\n               \n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-06-01 10:17:23.784166",
  "module": null,
  "name": "Update sales order Qty",
  "reference_doctype": "Purchase Invoice",
  "script": "\n\nmy_list = []\narray=[]\narray1=[]\n# Adding values to the list\nif doc.company==\"Lamit\":\n    \n\n    if doc.purchase_order:\n        for i in doc.items:\n            array1.append(i.item_code)\n            \n            doc1=frappe.get_doc(\"Sales Order\",i.sales_order_id)\n                \n            for j in doc1.items:\n                    # frappe.msgprint(str(j.qty))\n                if(i.item_code==j.item_code):\n                        # frappe.msgprint(str(j.qty))\n                    j.qty=i.qty\n                        \n            doc1.save()\n                \n            # frappe.msgprint(str(array1))\n           \n            if i.sales_order_id not in my_list:\n                my_list.append(i.sales_order_id)\n                \n                # frappe.msgprint(str(i.sales_order_id))\n                \n                \n                doc12=frappe.get_doc(\"Sales Order\",i.sales_order_id)\n                for k in doc12.items:\n                    # frappe.msgprint(str(k.item_code))\n                    array.append(k.item_code)\n                    \n                    # frappe.msgprint(str(array))\n                    \n                    \n                   \n                     \n            if i.item_code not in array:\n                # frappe.msgprint(str(i.item_code))\n                # frappe.msgprint(str(i.sales_order_id))\n                \n                x = frappe.get_doc(\"Sales Order\",i.sales_order_id)\n    \n                x.append(\"items\", \n                    {\n                                \"item_code\":i.item_code,\n                                \"item_name\":i.item_name,\n                                \"description\":i.item_code,\n                                \"uom\":i.uom,\n                                \"qty\":i.qty,\n                                \"conversion_factor\":1,\n            \n                                # \"price_list_rate\":i.rate,\n                                # \"rate\":i.rate,\n                                # \"amount\":i.amount\n                        }),\n                x.save()\n                #----------------------------------------------------------------------\n           \n                \n                \n                \n                        # frappe.msgprint(str(array))\n                \n                # for j in doc12.items:\n                    # frappe.msgprint(str(j.item_code),\"AGAINST\")\n                    # if i.item_code in j.item_code:\n                    #     # frappe.msgprint(str(i.item_code))\n                    # else:\n                    #     frappe.msgprint(str(i.item_code))\n                #     if(i.item_code==j.item_code):\n                #         # frappe.msgprint(str(j.qty))\n                #         j.qty=i.qty\n                        \n                # doc12.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-05-31 16:56:41.726239",
  "module": null,
  "name": "before save landing cost",
  "reference_doctype": "Landing Cost Calculation",
  "script": "if doc.grand_total_value_landing and doc.grand_selling_value_total:\n    # frappe.msgprint(doc.grand_total_value_landing)\n    # frappe.msgprint(doc.grand_selling_value_total)\n    t=float(doc.grand_selling_value_total)-float(doc.grand_total_value_landing)\n    rounded_number62=round(t,2)\n    # frappe.msgprint(str(t))\n    doc.grand_profit=rounded_number62\n    \n# doc.save()\n    \n    t1=(float(t)/float(doc.grand_selling_value_total))*100\n    rounded_number63=round(t1,2)\n                \n    doc.grand_margin=rounded_number63\n    # frappe.msgprint(str(t1))",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-05-31 16:56:00.684060",
  "module": null,
  "name": "landing cost calculation",
  "reference_doctype": "Landing Cost Calculation",
  "script": "# doc_id=doc.select_purchase_invoice\n# frappe.msgprint(\"doc_id\",doc_id)\nif doc.line_split and doc.duty_split and doc.clearing_split and doc.total_inr_1_usd:\n    \n    value_after_line_duty_clearing=float(doc.line_split)+float(doc.duty_split)+float(doc.clearing_split)+float(doc.total_inr_1_usd)\n    rounded_number1 = round(value_after_line_duty_clearing, 2)\n    doc.value_after_line_duty_clearing=rounded_number1\n    # frappe.msgprint(str(rounded_number1))\n    \n    # doc1=frappe.db.get_list('Landing Cost Calculation',\n    #     filters={\n    #         'purchase_invoice_id':doc.purchase_invoice_id\n    #     },\n    #     fields=[\"*\"],\n        \n        \n    # )\n    # # frappe.msgprint(str(rounded_number1))\n    # # frappe.msgprint(str(doc1))\n    \n    # # sum1=0\n    # for i in doc1:\n    #     all_plus=i.value_after_line_duty_clearing\n    #     frappe.msgprint(all_plus)\n    #     sum1=float(sum1)+float(i.value_after_line_duty_clearing)\n    #     # frappe.msgprint(str(sum1))\n    #     rounded_number11 = round(sum1, 2)\n    #     doc.total_landing=rounded_number11\n        \n        \n    # sum1 = 0\n    # for i in doc1:\n    #     value = i.value_after_line_duty_clearing\n    #     if value:\n    #         frappe.msgprint(value)\n            \n            # sum1 += float(value)\n    \n            # rounded_number11 = round(sum1, 2)\n            # doc.total_landing = rounded_number11\n    \n      \n   \n    \n    \n    export_landing_inr_per_pcs=float(doc.value_after_line_duty_clearing)/float(doc.number_of_pieces)\n    rounded_number2=round(export_landing_inr_per_pcs, 2)\n    doc.export_landing_inr_per_pcs=rounded_number2\n    \n    if(doc.purchase_type):\n    \n        if doc.purchase_type==\"DOMESTIC\":\n            # frappe.msgprint(\"M\")\n            \n            g2g=float(doc.export_landing_inr_per_pcs)*float(2.5)/100\n            total1=float(g2g)+float(doc.export_landing_inr_per_pcs)\n            \n            rounded_number3=round(total1, 2)\n            doc.i25_addition=rounded_number3\n            \n            \n            \n            g2g_total=float(rounded_number3)*float(doc.number_of_pieces)\n            rounded_number4=round(g2g_total, 2)\n            doc.i25_total=rounded_number4\n            \n            \n            tax=float((rounded_number4)*float(12))/100\n            rounded_number5=round(tax,2)\n            doc.i12_gst=rounded_number5\n            \n            with_tax=float(rounded_number5)+float(rounded_number4)\n            rounded_number6=round(with_tax,2)\n            doc.total_incl_gst=rounded_number6\n            \n            \n            if doc.i25_addition and doc.freight_split:\n                \n                addition=float(doc.i25_addition)+float(doc.freight_split)\n                rounded_number7=round(addition,2)\n                doc.landing_after_local_trans=rounded_number7\n                \n                \n                \n                addition1=float(rounded_number7)*float(doc.number_of_pieces)\n                rounded_number8=round(addition1,2)\n                doc.total_value_landing=rounded_number8\n                \n                \n                \n                \n                \n               \n                \n                \n                \n                \n                # if doc.selling_without_gst:\n                #     selling_value_total=float(doc.selling_without_gst)*float(doc.number_of_pieces)\n                #     rounded_number9=round(selling_value_total,2)\n                #     doc.selling_value_total=rounded_number9\n                    \n                #     margin=float(rounded_number9)-float(rounded_number8)\n                #     rounded_number10=round(margin,2)\n                #     doc.margin=rounded_number10\n                    \n                #     margin_percentage=float((rounded_number10)/float(rounded_number9))*100\n                #     rounded_number11=round(margin_percentage,2)\n                    \n                #     doc.margin_percentage=rounded_number11\n                    \n                    \n                    \n                    # doc5=frappe.db.get_list('Landing Cost Calculation',\n                    # filters={\n                    #     'purchase_invoice_id':doc.purchase_invoice_id\n                    # },\n                    # fields=[\"*\"],\n                    \n                    # )\n                \n                    # # # frappe.msgprint(str(doc1))\n                    # sum5=0\n                    # sum6=0\n                    # sum7=0\n                    \n                    # # sum8=0\n                    # for i in doc5:\n                    #     # name=i.name\n                        \n                            \n                        \n                    #     value=i.value_after_line_duty_clearing\n                    #     u25_total=i.i25_total\n                    #     value_landing=i.total_value_landing\n                       \n                        \n                       \n                        \n                    #     sum5=float(sum5)+float(value)\n                    #     rounded_number15 = round(sum5, 2)\n                    #     doc.total_landing = rounded_number15\n                        \n                    #     sum6=float(sum6)+float(u25_total)\n                    #     rounded_number16 = round(sum6, 2)\n                    #     doc.grand_total_25 = rounded_number16\n                    #     # frappe.msgprint(str(rounded_number16))\n                        \n                    #     sum7=float(sum7)+float(u25_total)\n                    #     rounded_number17 = round(sum7, 2)\n                    #     doc.grand_total_value_landing = rounded_number17\n                        \n                    \n                    \n                        \n                        # doc.grand_profit=rounded_number15\n                        \n                        #     sum6=float(rounded_number14)/float(i.grand_selling_value_total)*100\n                        #     rounded_number16 = round(sum6, 2)\n                        \n                        \n                            # doc.grand_margin=rounded_number16\n                        \n                        \n                        \n                        # sum1 = 0\n                        # for i in doc5:\n                        #     value = i.value_after_line_duty_clearing\n                        #     if value:\n                        #         # frappe.msgprint(value)\n                                \n                        #         sum1 += float(value)\n                                # frappe.msgprint(str(sum1))\n                        \n                                # rounded_number11 = round(sum1, 2)\n                                # doc.total_landing = rounded_number11\n                        \n                        \n        elif doc.purchase_type==\"INTERNATIONAL\":\n            \n            export_total=float(doc.export_landing_inr_per_pcs)*float(doc.number_of_pieces)\n            rounded_number41=round(export_total, 2)\n            # frappe.msgprint(str(rounded_number41))\n            doc.export_landing_total=rounded_number41\n            \n            with_tax=(rounded_number41*12)/100\n            rounded_number61=round(with_tax,2)\n            \n            doc.i12_gst=rounded_number61\n            \n            with_tax_grand=float(rounded_number61)+float(rounded_number41)\n            rounded_number62=round(with_tax_grand,2)\n            \n            doc.total_incl_gst=rounded_number62\n            \n            \n            if doc.export_landing_inr_per_pcs and doc.freight_split:\n                landing=float(doc.export_landing_inr_per_pcs)+float(doc.freight_split)\n                rounded_number63=round(landing,2)\n                doc.landing_after_local_trans=rounded_number63\n                \n                \n                total_value_landing=float(rounded_number63)*float(doc.number_of_pieces)\n                rounded_number64=round(total_value_landing,2)\n                doc.total_value_landing=rounded_number64\n                \n                \n                # if doc.selling_without_gst:\n                #     selling_value_total=float(doc.selling_without_gst)*float(doc.number_of_pieces)\n                #     rounded_number9=round(selling_value_total,2)\n                #     doc.selling_value_total=rounded_number9\n                    \n                    \n                #     margin=float(rounded_number9)-float(rounded_number64)\n                #     rounded_number10=round(margin,2)\n                #     doc.margin=rounded_number10\n                    \n                #     margin_percentage=float((rounded_number10)/float(rounded_number9))*100\n                #     rounded_number11=round(margin_percentage,2)\n                    \n                #     doc.margin_percentage=rounded_number11\n                    \n                    \n                #     doc5=frappe.db.get_list('Landing Cost Calculation',\n                #     filters={\n                #         'purchase_invoice_id':doc.purchase_invoice_id\n                #     },\n                #     fields=[\"*\"],\n                    \n                #     )\n                \n                #     # # frappe.msgprint(str(doc1))\n                #     sum5=0\n                #     sum6=0\n                #     sum7=0\n                    \n                   \n                #     for i in doc5:\n                #         name=i.name\n                        \n                       \n                        \n                #         value=i.value_after_line_duty_clearing\n                #         # u25_total=i.i25_total\n                #         value_landing=i.total_value_landing\n                       \n                        \n                        \n                        \n                        \n                        \n                        \n                #         sum5=float(sum5)+float(value)\n                #         rounded_number15 = round(sum5, 2)\n                #         doc.total_landing = rounded_number15\n                        \n                        \n                #         sum7=float(sum7)+float(value_landing)\n                #         rounded_number17 = round(sum7, 2)\n                #         doc.grand_total_value_landing = rounded_number17\n                        \n                        \n                        \n                #         # doc12=frappe.get_doc(\"Landing Cost Calculation\",name)\n                        \n                        \n                #         # if(doc12.selling_value_total):\n                #         #     sum5=float(sum5)+float(doc12.selling_value_total)\n                #         #     frappe.msgprint(str(sum5))\n                #             # my_list = []\n\n                            \n                #             # my_list.append(doc12.selling_value_total)\n                #             # frappe.msgprint(str(my_list))\n                        \n                        \n                        \n                        \n                        \n                        \n                       \n                \n                \n                        \n                \n                \n            \n            \n            \n            \n            \n            \n                        \n                    \n                    \n                    \n                \n                \n            \n\n\n                \n            \n            \n            \n            \n            \n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-06-01 10:34:11.614866",
  "module": null,
  "name": "Journal Entry",
  "reference_doctype": "Journal Entry",
  "script": "# d=frappe.msgprint(doc.select_purchase_invoice)\n\nif doc.select_purchase_invoice:\n\n    doc1=frappe.db.get_list('Landing Cost Calculation',\n        filters={\n            'purchase_invoice_id':doc.select_purchase_invoice\n        },\n        fields=[\"*\"],\n       \n    )\n\n    # frappe.msgprint(str(doc1))\n    for i in doc1:\n        # frappe.msgprint(str(i.item))\n       \n        # value_aportion=i.value_based_aportion\n        debit=doc.total_debit\n        name=i.name\n        value_aportion=i.value_based_aportion\n        qty_aportion=i.qty_per_aportion\n        total_qty=i.total_qty\n        \n       \n        # frappe.msgprint(str(debit))\n        # frappe.msgprint(str(name))\n        # frappe.msgprint(str(value_aportion))\n        \n        if value_aportion:\n            if doc.select_charge_type==\"Customs Charge\":\n            \n        \n                duty_split=float(debit)*float(value_aportion)/100\n                rounded_number1 = round(duty_split, 2)\n                \n            elif  doc.select_charge_type==\"Clearing Charge\":\n                # frappe.msgprint(str(debit))\n                # frappe.msgprint(str(value_aportion))\n                \n                clearing_split=float(debit)*float(value_aportion)/100\n                rounded_number3 = round(clearing_split, 2)\n                # frappe.msgprint(str(rounded_number3))\n                \n            \n            \n        if qty_aportion:\n            if doc.select_charge_type==\"Line Charge\":\n        \n                line_split=float(debit)*float(qty_aportion)/100\n                rounded_number2 = round(line_split, 2)\n       \n        # if value_aportion:\n        #     if doc.select_charge_type==\"Clearing Charge\":\n            \n        #         clearing_split=float(debit)*float(value_aportion)/100\n        #         rounded_number3 = round(clearing_split, 2)\n            \n            \n            \n        if total_qty:\n            if doc.select_charge_type==\"Local Freight Charge\":\n            \n        \n                freight_split=float(debit)/float(total_qty)\n                rounded_number4 = round(freight_split, 2)\n            \n        \n        doc12=frappe.get_doc(\"Landing Cost Calculation\",name)\n        \n        if doc.select_charge_type==\"Customs Charge\":\n            \n        \n            # frappe.msgprint(str(debit))\n            doc12.custom_duty=debit\n            \n            doc12.duty_split=rounded_number1\n            \n           \n            \n        if doc.select_charge_type==\"Line Charge\":\n            \n            doc12.line=debit\n            doc12.line_split=rounded_number2\n            \n        if doc.select_charge_type==\"Clearing Charge\":\n           \n            \n            doc12.clearing=debit\n            # frappe.msgprint(str(rounded_number3))\n            doc12.clearing_split=rounded_number3\n            # frappe.msgprint(str(rounded_number3))\n            \n        if doc.select_charge_type==\"Local Freight Charge\":\n            doc12.local_freight=debit\n            doc12.freight_split=rounded_number4\n        \n        doc12.save()\n        \n        \n        \n        \n    \n    \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-06-09 16:54:36.253653",
  "module": null,
  "name": "address in jobapplicant",
  "reference_doctype": "Job Applicant",
  "script": "if doc.place1:\n    \n    doc1 = frappe.get_doc('Address', doc.place1)\n    doc.address_line1=doc1.address_line1\n    doc.address_line2=doc1.address_line2\n    doc.city=doc1.city\n    doc.pincode=doc1.pincode\n    \n    employees = frappe.get_list('Employee', filters={'designation': ['in', ['HR Manager', 'HR User']],'status':'Active'},fields=['name', 'employee_name','designation','cell_number'])\n    # frappe.msgprint(str(employees))\n    for employee in employees:\n        if employee.designation==\"HR Manager\":\n            # frappe.msgprint(str(employee.employee_name))\n            doc.hr_manager=employee.employee_name\n            doc.mobile1=employee.cell_number\n            \n        elif employee.designation==\"HR User\":\n            # frappe.msgprint(str(employee.employee_name))\n            doc.hr_user=employee.employee_name\n            doc.mobile2=employee.cell_number\n   ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-06-21 14:27:52.915859",
  "module": null,
  "name": "lead today date",
  "reference_doctype": "Lead",
  "script": "doc_date = frappe.utils.get_datetime(doc.date)          # code written by nahala\nnow_date = frappe.utils.get_datetime(frappe.utils.nowdate())\nif doc_date.date()== now_date.date():\n   doc.pastfuture_filter=\"Today\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2023-06-21 14:31:30.276417",
  "module": null,
  "name": "date filter",
  "reference_doctype": null,
  "script": "now_date = frappe.utils.get_datetime(frappe.utils.nowdate())\nleads = frappe.get_all(\"Lead\", filters={\"date\":(\"<\",now_date)}, fields=[ \"name\",\"pastfuture_filter\"])\nfor lead in leads:\n    \n    doc = frappe.get_doc(\"Lead\", lead.name)\n    doc_date = frappe.utils.get_datetime(doc.date)\n    now_date = frappe.utils.get_datetime(frappe.utils.nowdate())\n    doc.pastfuture_filter=\"Past\"\n    doc.save()",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2023-06-21 14:56:47.446315",
  "module": null,
  "name": "date filter task",
  "reference_doctype": null,
  "script": "now_date = frappe.utils.get_datetime(frappe.utils.nowdate())    \ndocs = frappe.get_all(\"Task\", filters={}, fields=[\"name\", \"due_date\", \"date_filter\"])\nfor doc in docs:\n    doc_obj = frappe.get_doc(\"Task\", doc.name)\n    doc_date = frappe.utils.get_datetime(doc.due_date)\n    now_date = frappe.utils.get_datetime(frappe.utils.nowdate())\n\n    if doc_date.date() > now_date.date():\n        doc_obj.date_filter = \"Future\"\n    elif doc_date.date() == now_date.date():\n        doc_obj.date_filter = \"Today\"\n    else:\n        doc_obj.date_filter = \"Past\"\n\n    doc_obj.save()",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-06-21 14:53:14.508526",
  "module": null,
  "name": "date filter before save",
  "reference_doctype": "Task",
  "script": "doc_date = frappe.utils.get_datetime(doc.due_date)               #code written by nahala\nnow_date = frappe.utils.get_datetime(frappe.utils.nowdate())\nif doc_date.date()== now_date.date():\n    doc.date_filter=\"Today\"\nelif doc_date.date() > now_date.date():\n    doc.date_filter=\"Future\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-10-16 15:16:02.181108",
  "module": null,
  "name": "test",
  "reference_doctype": "test",
  "script": "lead_list = frappe.get_list(\"Salary Structure\", filters={\"company\": \"Lamit\"})\n\n    # Set the status field options in another field\nfor lead in lead_list:\n    # frappe.msgprint(str(lead.name))\n    doc = frappe.get_doc(\"Salary Structure\", lead.name)\n    doc.enable=1\n    doc.save()\n\n\n# year = 2023\n# month = 'April'\n\n# # Get the month number from the map\n# month_map = {\n#     'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6,\n#     'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12\n# }\n# month_number = month_map[month]\n\n# # Format the start date (1st day of the month)\n# start_date = f\"{year}-{month_number:02d}-01\"\n\n# # Calculate the last day of the month\n# last_day_of_month = 31 if month_number in {1, 3, 5, 7, 8, 10, 12} else 30 if month_number != 2 else 28\n\n# # Format the end date (last day of the month)\n# end_date = f\"{year}-{month_number:02d}-{last_day_of_month:02d}\"\n\n# # Print the results\n# frappe.msgprint(start_date)\n# frappe.msgprint( end_date)\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-10-13 10:20:04.815026",
  "module": null,
  "name": "Attendance",
  "reference_doctype": "Attendance",
  "script": "if doc.designation==\"Sales Officer\":\n    f=frappe.db.get_list('Assign Sale Area',\n    filters={\n        'sales_officer': doc.employee\n    },\n    fields=['name','area_sales_manager_email'],\n    \n    )\n    # frappe.msgprint(str(f[0].area_sales_manager_email))\n    if f:\n    \n        doc.asm_email=f[0].area_sales_manager_email",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2023-10-13 16:26:30.635472",
  "module": null,
  "name": "Before Insert",
  "reference_doctype": "Salary Slip",
  "script": "\n\n\n\nif doc.year2:\n    # frappe.msgprint(\"JIO\")\n    fullday_count=0\n    halfday_count=0\n    total_count=0\n    \n    fullday_count=frappe.db.count('Attendance', {'employee':doc.employee,\"status\":\"Present\",'attendance_date':['between', [doc.start_date,doc.end_date]]})\n    halfday_count=frappe.db.count('Attendance', {'employee':doc.employee,\"status\":\"Half Day\",'attendance_date':['between', [doc.start_date,doc.end_date]]})\n    \n    total_count=float(fullday_count)+(float(halfday_count)*.5)\n    \n    # frappe.msgprint(str(doc.start_date))\n    # frappe.msgprint(str(doc.end_date))\n    \n\n    doc.days=total_count\n    \n\n\n    \nif len(doc.earnings)>0:\n    \n    \n    \n        for y in doc.earnings:\n            \n            # frappe.msgprint(str(y.salary_component))\n            \n            \n            if y.salary_component==\"Basic Pay\" :\n                # frappe.msgprint(str(y.amount))\n                \n                \n    \n                doc.basic=y.amount\n            elif y.salary_component==\"House Rent Allowance\":\n                doc.house_rent_allowance=y.amount\n            elif y.salary_component==\"Dearness Allowance\":\n                doc.dearness_allowance=y.amount\n            \n            elif y.salary_component==\"Accommodation\":\n                doc.accommodation=y.amount\n            elif y.salary_component==\"Company Vehicle\":\n                doc.company_vehicle=y.amount\n            elif y.salary_component==\"Conveyance Allowance\":\n                doc.conveyance_allowance=y.amount\n            elif y.salary_component==\"Other Allowance\":\n                doc.other_allowance=y.amount\n                \n            \n            elif y.salary_component==\"Over Time\":\n                doc.over_time=y.amount\n            elif y.salary_component==\"Outstation Allowance\":\n                doc.outstation_allowance=y.amount\n                \n            elif y.salary_component==\"Special Allowance\":\n                doc.special_allowance1=y.amount\n            elif y.salary_component==\"Leave Travel Allowance\":\n                doc.leave_travel_allowance=y.amount\n            elif y.salary_component==\" Arrear\":\n                doc.arrear=y.amount\n                \n                \n                \n                \n                \n                \n                \n\n            \n\n                \n          \n        \n        if doc.basic and doc.dearness_allowance:\n            total=float(doc.basic)+float(doc.dearness_allowance)\n            doc.baseplusda=total\n            if total>=21000:\n                doc.baseplusda1=21000\n            else:\n                doc.baseplusda1=total\n                \n                \n                \n          \n\n        \n            \n            \n            \ndoc.save()     \n         \n\n    \n    \n    \n\n\n\n\n    \n",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-10-13 16:26:23.541620",
  "module": null,
  "name": "Before Save",
  "reference_doctype": "Salary Slip",
  "script": "\n\ncomp_earning=[]\ncomp_earning_value=[]\ncomp_earning_account=[]\ndeb_or_credit1=[]\n\ncomp_dedc=[]\ncomp_dedc_value=[]\ncomp_dedc_account=[]\ndeb_or_credit2=[]\npayment_days=doc.payment_days\nnumber_of_days=doc.no_of_days_in_month\n\n\n\narray=[]\n\n\n\n\n\n\nif doc.f_and_f1 == 1:\n    # Check if start_date is set and valid\n    if doc.start_date:\n        # Extract the month and year from the start_date field\n        date_string = doc.start_date\n        year = int(date_string[:4])\n        month = int(date_string[5:7])\n        \n        if month == 2:\n    # Check if it's a leap year and update the days in February\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                days_in_month = 29\n            else:\n                days_in_month = 28\n        elif month in [4, 6, 9, 11]:\n            days_in_month = 30\n        else:\n            days_in_month = 31\n            \n    \n       \n        doc.total_days1=days_in_month\n       \n    \n\n\n    \n\n\n    \n\n \n \n   \n    \n\nif len(doc.earnings)>0:\n    \n    if doc.f_and_f1 == 1:\n        \n        net_pay=[]\n        \n        doc.f_and_f = []\n        \n         \n        for y in doc.get(\"earnings\"):\n        \n        \n            if y.salary_component==\"Variable Dearness Allowance\":\n                \n               \n                \n                doc.variable_da=y.amount\n                \n                # net_pay.append(y.amount)\n                \n                # \n                \n                doc.append(\"f_and_f\", \n                {\n                                \"salary_component\":\"Variable Dearness Allowance\",\n                                # \"check\":1,\n                                \"amount\":y.amount\n                                # \"parent_account\":y\n                }),\n                \n                \n                \n                \n                \n            elif y.salary_component==\"Transport Allowance\":\n               \n                \n                doc.travelling_allowance=y.amount\n                \n                # net_pay.append(y.amount)\n                \n                # frappe.msgprint(str(net_pay))\n                \n                \n                \n                doc.append(\"f_and_f\", \n                {\n                                \"salary_component\":\"Transport Allowance\",\n                                # \"check\":1,\n                                \"amount\":y.amount\n                                # \"parent_account\":y\n                }),\n                # frappe.msgprint(str(net_pay))\n                \n            elif y.salary_component==\"Basic Pay\":\n                \n                da=float(y.amount)/float(doc.total_days1)*float(doc.payment_days)\n                \n               \n                rounded_output1 = round(da, 3)\n                \n                # doc.travelling_allowance=rounded_output1\n                doc.basic=rounded_output1\n                \n                # net_pay.append(rounded_output1)\n                \n                # frappe.msgprint(str(net_pay))\n                \n                \n                \n                doc.append(\"f_and_f\", \n                {\n                                \"salary_component\":\"Basic Pay\",\n                                # \"check\":1,\n                                \"amount\":rounded_output1\n                                # \"parent_account\":y\n                }),\n                \n               \n                \n            \n            elif y.salary_component==\"House Rent Allowance\":\n                \n                da=float(y.amount)/float(doc.total_days1)*float(doc.payment_days)\n                \n               \n                rounded_output2 = round(da, 3)\n                \n                # doc.travelling_allowance=rounded_output2\n                doc.house_rent_allowance=rounded_output1\n                \n                # net_pay.append(y.rounded_output2)\n                # frappe.msgprint(str(net_pay))\n                \n                \n                doc.append(\"f_and_f\", \n                {\n                                \"salary_component\":\"House Rent Allowance\",\n                                # \"check\":1,\n                                \"amount\":rounded_output2\n                                # \"parent_account\":y\n                }),\n                \n                \n            elif y.salary_component==\"Dearness Allowance\":\n                \n                da=float(y.amount)/float(doc.total_days1)*float(doc.payment_days)\n                \n               \n                rounded_output3 = round(da, 3)\n                \n                doc.dearness_allowance=rounded_output3\n                \n                # net_pay.append(rounded_output3)\n                \n                doc.append(\"f_and_f\", \n                {\n                                \"salary_component\":\"Dearness Allowance\",\n                                # \"check\":1,\n                                \"amount\":rounded_output3\n                                # \"parent_account\":y\n                }),\n                \n            elif y.salary_component==\"Accommodation\":\n                \n                da=float(y.amount)/float(doc.total_days1)*float(doc.payment_days)\n                \n               \n                rounded_output4 = round(da, 3)\n                \n                doc.accomodation=rounded_output4\n                \n                # net_pay.append(rounded_output4)\n                \n                doc.append(\"f_and_f\", \n                {\n                                \"salary_component\":\"Accommodation\",\n                                # \"check\":1,\n                                \"amount\":rounded_output4\n                                # \"parent_account\":y\n                }),\n                \n            elif y.salary_component==\"Leave Travel Allowance\":\n                \n                da=float(y.amount)/float(doc.total_days1)*float(doc.payment_days)\n                \n               \n                rounded_output5 = round(da, 3)\n                \n                doc.leave_travel_allowance=rounded_output5\n                \n                # net_pay.append(y.rounded_output5)\n                \n                doc.append(\"f_and_f\", \n                {\n                                \"salary_component\":\"Leave Travel Allowance\",\n                                # \"check\":1,\n                                \"amount\":rounded_output5\n                                # \"parent_account\":y\n                }),\n                \n                \n            elif y.salary_component==\"Conveyance Allowance\":\n                \n                da=float(y.amount)/float(doc.total_days1)*float(doc.payment_days)\n                \n               \n                rounded_output6 = round(da, 3)\n                \n                doc.conveyance_allowance=rounded_output6\n                \n                # net_pay.append(rounded_output6)\n                \n                doc.append(\"f_and_f\", \n                {\n                                \"salary_component\":\"Conveyance Allowance\",\n                                # \"check\":1,\n                                \"amount\":rounded_output6\n                                # \"parent_account\":y\n                }),\n                \n            elif y.salary_component==\"Other Allowance\":\n                \n                da=float(y.amount)/float(doc.total_days1)*float(doc.payment_days)\n                \n               \n                rounded_output7 = round(da, 3)\n                \n                doc.other_allowance=rounded_output7\n                \n                # net_pay.append(rounded_output7)\n                \n                doc.append(\"f_and_f\", \n                {\n                                \"salary_component\":\"Other Allowance\",\n                                # \"check\":1,\n                                \"amount\":rounded_output7\n                                # \"parent_account\":y\n                }),\n                \n                \n            elif y.salary_component==\"Special Allowance\":\n                \n                da=float(y.amount)/float(doc.total_days1)*float(doc.payment_days)\n                \n               \n                rounded_output8 = round(da, 3)\n                \n                doc.special_allowance1=rounded_output8\n                \n                # net_pay.append(rounded_output7)\n                \n                doc.append(\"f_and_f\", \n                {\n                                \"salary_component\":\"Special Allowance\",\n                                # \"check\":1,\n                                \"amount\":rounded_output8\n                                # \"parent_account\":y\n                }),\n                \n                \n            elif y.salary_component==\"Outstation Allowance\":\n                \n                da=float(y.amount)/float(doc.total_days1)*float(doc.payment_days)\n                \n               \n                rounded_output9 = round(da, 3)\n                \n                doc.outstation_allowance=rounded_output9\n                \n                # net_pay.append(rounded_output7)\n                \n                doc.append(\"f_and_f\", \n                {\n                                \"salary_component\":\"Outstation Allowance\",\n                                # \"check\":1,\n                                \"amount\":rounded_output9\n                                # \"parent_account\":y\n                }),\n                \n                \n                # frappe.msgprint(str(net_pay))\n                \n                \n    \n    \n   \n        \n        total = 0\n\n        # Loop through the elements and add them to the total\n        for num in doc.f_and_f:\n            total = float(total)+float(num.amount)\n            \n        doc.gross_pay_f_and_f=total\n        \n        doc.net_pay_f_and_f=float(total)-float(doc.total_deduction)\n        \n            \n   \n            \n                \n                \n                \n                \n        \n                \n                \n                \n                \n                \n                \n                \n                \n            \n                \n                \n                 \n    else:\n         for y in doc.get(\"earnings\"):\n            if y.salary_component==\"Variable Dearness Allowance\":\n                doc.variable_da=y.amount\n                \n            elif y.salary_component==\"Transport Allowance\":\n                doc.travelling_allowance=y.amount\n        \n        \n\n\n            \n\n          \n          \nif len(doc.deductions)>0:      \n            \n    for y in doc.get(\"deductions\"):\n            if y.salary_component==\"Employer Provident Fund\":\n                doc.pf=y.amount\n                \n            \n            elif y.salary_component==\"Professional Tax\":\n                doc.pt=y.amount\n                \n            elif y.salary_component==\"Employer State Insurance\":\n                # frappe.msgprint(str(y.salary_component))\n                doc.esi=y.amount\n                \n            elif y.salary_component==\"Other Deduction\":\n                doc.other_deduction=y.amount\n            \n            elif y.salary_component==\"Advance\":\n                doc.advance=y.amount\n                \n            elif y.salary_component==\"TDS\":\n                doc.tds_payable=y.amount\n                \n            \n            \n\n\n\n\n\n#SHINIL------------------------------------------------\n\nif doc.f_and_f1==1:\n    \n    doc.accounts_details = []\n    \n    \n    if doc.employee_payroll_payable:\n        # formatted_a = \"{:.3f}\".format(doc.net_pay)\n        \n        # frappe.msgprint(str(doc.rounded_total))\n        doc.append(\"accounts_details\", \n            {\n                            \"account\":doc.employee_payroll_payable,\n                            \"check\":1,\n                            \"credit\":doc.net_pay_f_and_f,\n                            # \"parent_account\":y\n            }),\n            \n            \n            \n    if doc.employee_pf_payable:\n        if doc.pf:\n            \n        # frappe.msgprint(str(doc.rounded_total))\n            doc.append(\"accounts_details\", \n                {\n                                \"account\":doc.employee_pf_payable,\n                                # \"credit\":1,\n                                \"credit\":doc.pf,\n                                # \"parent_account\":y\n                }),\n                \n                \n                \n    if doc.employee_tds:\n        if doc.tds_payable:\n            \n        # frappe.msgprint(str(doc.rounded_total))\n            doc.append(\"accounts_details\", \n                {\n                                \"account\":doc.employee_tds,\n                                # \"credit\":1,\n                                \"credit\":doc.tds_payable,\n                                # \"parent_account\":y\n                }),\n                \n                \n                \n    if doc.employee_pt_payable:\n        if doc.pt:\n            \n        # frappe.msgprint(str(doc.rounded_total))\n            doc.append(\"accounts_details\", \n                {\n                                \"account\":doc.employee_pt_payable,\n                                # \"credit\":1,\n                                \"credit\":doc.pt,\n                                # \"parent_account\":y\n                }),\n                \n                \n    if doc.employee_esi_payable:\n        if doc.esi:\n            \n        # frappe.msgprint(str(doc.rounded_total))\n            doc.append(\"accounts_details\", \n                {\n                                \"account\":doc.employee_esi_payable,\n                                # \"credit\":1,\n                                \"credit\":doc.esi,\n                                # \"parent_account\":y\n                }),\n                \n                \n    if doc.employee_advance_payable:\n        if doc.advance:\n            \n        # frappe.msgprint(str(doc.rounded_total))\n            doc.append(\"accounts_details\", \n                {\n                                \"account\":doc.employee_advance_payable,\n                                # \"credit\":1,\n                                \"credit\":doc.advance,\n                                # \"parent_account\":y\n                }),\n                \n                \n    if len(doc.earnings)>0:\n        # frappe.msgprint(doc.earnings[0].account)\n        rounded_value = round(doc.gross_pay)\n        # frappe.msgprint(str(rounded_value))\n        doc.append(\"accounts_details\", \n                {\n                                \"account\":\"Salary - LR\",\n                                # \"credit\":\"0\",\n                                \"debit\":doc.gross_pay_f_and_f,\n                                # \"parent_account\":y\n                }),\n                \n    if len(doc.deductions)>0:\n        # frappe.msgprint(str(\"ll\"))\n        for r in doc.deductions:\n            if r.salary_component==\"Other Deduction\":\n                doc.append(\"accounts_details\", \n                {\n                                \"account\":\"Salary - LR\",\n                                # \"credit\":\"0\",\n                                \"credit\":r.amount,\n                                # \"parent_account\":y\n                }),\n    \n    \nelse:    \n    \n\n    doc.accounts_details = []\n    \n    \n    \n    \n    \n    if doc.employee_payroll_payable:\n        # formatted_a = \"{:.3f}\".format(doc.net_pay)\n        \n        # frappe.msgprint(str(doc.rounded_total))\n        doc.append(\"accounts_details\", \n            {\n                            \"account\":doc.employee_payroll_payable,\n                            \"check\":1,\n                            \"credit\":doc.net_pay,\n                            # \"parent_account\":y\n            }),\n            \n            \n    if doc.employee_pf_payable:\n        if doc.pf:\n            \n        # frappe.msgprint(str(doc.rounded_total))\n            doc.append(\"accounts_details\", \n                {\n                                \"account\":doc.employee_pf_payable,\n                                # \"credit\":1,\n                                \"credit\":doc.pf,\n                                # \"parent_account\":y\n                }),\n                \n                \n                \n    if doc.employee_tds:\n        if doc.tds_payable:\n            \n        # frappe.msgprint(str(doc.rounded_total))\n            doc.append(\"accounts_details\", \n                {\n                                \"account\":doc.employee_tds,\n                                # \"credit\":1,\n                                \"credit\":doc.tds_payable,\n                                # \"parent_account\":y\n                }),\n                \n                \n                \n    if doc.employee_pt_payable:\n        if doc.pt:\n            \n        # frappe.msgprint(str(doc.rounded_total))\n            doc.append(\"accounts_details\", \n                {\n                                \"account\":doc.employee_pt_payable,\n                                # \"credit\":1,\n                                \"credit\":doc.pt,\n                                # \"parent_account\":y\n                }),\n                \n                \n    if doc.employee_esi_payable:\n        if doc.esi:\n            \n        # frappe.msgprint(str(doc.rounded_total))\n            doc.append(\"accounts_details\", \n                {\n                                \"account\":doc.employee_esi_payable,\n                                # \"credit\":1,\n                                \"credit\":doc.esi,\n                                # \"parent_account\":y\n                }),\n                \n                \n    if doc.employee_advance_payable:\n        if doc.advance:\n            \n        # frappe.msgprint(str(doc.rounded_total))\n            doc.append(\"accounts_details\", \n                {\n                                \"account\":doc.employee_advance_payable,\n                                # \"credit\":1,\n                                \"credit\":doc.advance,\n                                # \"parent_account\":y\n                }),\n    \n    \n    \n    \n    \n    \n    if len(doc.earnings)>0:\n        # frappe.msgprint(doc.earnings[0].account)\n        rounded_value = round(doc.gross_pay)\n        # frappe.msgprint(str(rounded_value))\n        doc.append(\"accounts_details\", \n                {\n                                \"account\":\"Salary - LR\",\n                                # \"credit\":\"0\",\n                                \"debit\":doc.gross_pay,\n                                # \"parent_account\":y\n                }),\n                \n    if len(doc.deductions)>0:\n        # frappe.msgprint(str(\"ll\"))\n        for r in doc.deductions:\n            if r.salary_component==\"Other Deduction\":\n                doc.append(\"accounts_details\", \n                {\n                                \"account\":\"Salary - LR\",\n                                # \"credit\":\"0\",\n                                \"credit\":r.amount,\n                                # \"parent_account\":y\n                }),\n                # frappe.msgprint(str(r.amount))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n                \n                \n                \n                \n                \n                \n                \n    \n        # if doc.month1:\n        #     month_map = {\n        #         'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6,\n        #         'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12\n        #     }\n        #     month_number = month_map.get(doc.month1)\n    \n        #     # Calculate the first day of the selected month\n        #     from_date = f\"{doc.year2}-{month_number:02d}-01\"\n    \n        #     # Calculate the last day of the selected month\n        #     last_day_of_month = {\n        #         1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        #         7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n        #     }.get(month_number)\n    \n        #     if month_number == 2 and (int(doc.year2) % 4 == 0 and (int(doc.year2) % 100 != 0 or int(doc.year2) % 400 == 0)):\n        #         # Leap year condition for February\n        #         last_day_of_month = 29\n    \n        #     to_date = f\"{doc.year2}-{month_number:02d}-{last_day_of_month:02d}\"\n    \n        #     # Set the from_date and to_date fields in the salary slip\n        #     # doc.from_date = from_date\n        #     # doc.to_date = to_date\n    \n        #     frappe.msgprint(from_date)\n        #     frappe.msgprint(to_date)\n\n\n\n\n\n\n\n# accounts_details = doc.get(\"accounts_details\")\n\n# if len(accounts_details)==0:\n#     # frappe.msgprint(\"HII\")\n#     for x in frappe.db.get_list(\"Salary Component\",filters={\"type\":\"Earning\"}):\n#             comp_earning.append(x.name)\n#             frappe.msgprint(str(comp_earning))\n#             comp_earning_value.append(\" \")\n#             z=\" \"\n            \n#             doc1=frappe.get_doc(\"Salary Component\",x.name)\n            \n#             for y in doc1.get(\"accounts\"):\n#                 if y.company==doc.company:\n#                     z=y.account\n#             comp_earning_account.append(z)\n#             # frappe.msgprint(str(comp_earning_account))\n        \n    \n    \n#     for x in frappe.db.get_list(\"Salary Component\",filters={\"type\":\"Deduction\",\"disabled\":0}):\n#         comp_dedc.append(x.name)\n#         # frappe.msgprint(str(comp_dedc))\n#         comp_dedc_value.append(\" \")\n#         z=\" \"\n        \n#         doc1=frappe.get_doc(\"Salary Component\",x.name)\n        \n#         for y in doc1.get(\"accounts\"):\n#             if y.company==doc.company:\n#                 z=y.account\n#         comp_dedc_account.append(z)\n#         # frappe.msgprint(str(comp_dedc_account))\n        \n        \n        \n    # for y in doc.get(\"earnings\"):\n        \n    #     if y.salary_component in comp_earning:\n    #         idx=comp_earning.index(y.salary_component)\n    #         # frappe.msgprint(str(idx))\n            \n    #         if comp_earning_value[idx]==\" \":\n    #             comp_earning_value[idx]=y.amount\n    #             # frappe.msgprint(str(comp_earning_value[idx]))\n                \n                \n    #         else:\n    #             comp_earning_value[idx]=float(comp_earning_value[idx])+float(y.amount)\n    #             # frappe.msgprint(str(comp_earning_value[idx]))\n                \n                \n    # for y in doc.get(\"deductions\"):\n    #     if y.salary_component in comp_dedc:\n    #         idx=comp_dedc.index(y.salary_component)\n    #         if comp_dedc_value[idx]==\" \":\n    #             comp_dedc_value[idx]=y.amount\n    #         else:\n    #             comp_dedc_value[idx]=float(comp_dedc_value[idx])+float(y.amount)\n    \n    \n#     # for x in range(0,len(comp_earning)):\n#     #     frappe.msgprint(str(comp_earning[x])+\"------\"+str(comp_earning_value[x]))\n    \n#     indexes_to_remove=[]\n#     r=len(comp_earning_value)           \n#     for x in range(0,r):\n#         if comp_earning_value[x]==\" \":\n#             indexes_to_remove.append(x)\n            \n#     indexes_to_remove.sort(reverse=True)\n    \n#     for x in indexes_to_remove:\n#         comp_earning.pop(x)\n#         comp_earning_value.pop(x)\n#         comp_earning_account.pop(x)\n#         # deb_or_credit1.pop(x)\n    \n\n    \n#     indexes_to_remove=[]\n#     r=len(comp_dedc_value)           \n#     for x in range(0,r):\n#         if comp_dedc_value[x]==\" \":\n#             indexes_to_remove.append(x)\n            \n#     indexes_to_remove.sort(reverse=True)\n    \n#     for x in indexes_to_remove:\n#         comp_dedc.pop(x)\n#         comp_dedc_value.pop(x)\n#         comp_dedc_account.pop(x)\n#         # deb_or_credit2.pop(x)\n\n        \n#     #save into field in salary slip to take into report\n    \n#     # for x in range(0,comp_earning):\n#     #     if comp_earning[x]==\"Basic\":\n#     #         doc.basic=comp_earning_value[x]\n    \n    \n    \n             \n#     # # # # Find the parent accounts of these accounts\n    \n#     for x in range(0,len(comp_earning_account)):\n#         a=frappe.get_doc('Account',comp_earning_account[x])\n#         b=a.parent_account\n    \n    \n#         if \"-\"in a.parent_account:\n#             c=b.split(\"-\")[0].strip()\n#         else:\n#             c=b.strip()\n            \n#         if c==\"Indirect Expenses\":\n#             deb_or_credit1.append(\"1\")\n#         else:\n#             deb_or_credit1.append(\"0\")\n            \n    \n#     for x in range(0,len(comp_dedc_account)):\n#         a=frappe.get_doc('Account',comp_dedc_account[x])\n#         b=a.parent_account\n        \n#         if \"-\"in b:\n#             c=b.split(\"-\")[0].strip()\n#         else:\n#             c=b.strip()\n            \n#         if c==\"Indirect Expenses\":\n#             deb_or_credit2.append(\"1\")\n#         else:\n#             deb_or_credit2.append(\"0\")\n            \n#     # frappe.msgprint(\"deb_or_credit1---\"+str(deb_or_credit1))\n#     # frappe.msgprint(\"deb_or_credit2---\"+str(deb_or_credit2))\n    \n    \n#     # # Remove duplicate accounts and find the sum of same components if exist --earnings\n    \n#     dic_comp_earning_account =dict.fromkeys(comp_earning_account)\n#     final_comp_earning_account=[]\n#     final_comp_earning_value=[]\n#     final_comp_earning_credit=[]\n\n#     for x in dic_comp_earning_account.keys():\n#         final_comp_earning_account.append(x)\n    \n#     for x in range(0,len(final_comp_earning_account)):\n#         z=0\n#         q=0\n        \n#         for y in range(0,len(comp_earning_account)):\n#             if comp_earning_account[y]==final_comp_earning_account[x]:\n#                 z=z+float(comp_earning_value[y])\n#                 q=float(deb_or_credit1[y])\n                \n#         final_comp_earning_value.append(z)\n#         final_comp_earning_credit.append(q)\n    \n    \n#     # # Remove duplicate accounts and find the sum of same components if exist --deductions\n    \n#     dic_comp_dedc_account =dict.fromkeys(comp_dedc_account)\n#     final_comp_dedc_account=[]\n#     final_comp_dedc_value=[]\n#     final_comp_dedc_credit=[]\n    \n#     for x in dic_comp_dedc_account.keys():\n#         final_comp_dedc_account.append(x)\n    \n#     for x in range(0,len(final_comp_dedc_account)):\n#         z=0\n#         q=0\n        \n#         for y in range(0,len(comp_dedc_account)):\n#             if comp_dedc_account[y]==final_comp_dedc_account[x]:\n#                 z=z+float(comp_dedc_value[y])\n#                 q=float(deb_or_credit2[y])\n                \n#         final_comp_dedc_value.append(z)\n#         final_comp_dedc_credit.append(q)\n    \n#     # ------------------------------------------------------\n    \n#     for x in range(0,len(final_comp_earning_account)):\n#         doc1=frappe.get_doc(\"Account\",final_comp_earning_account[x])\n#         if doc1.parent_account:\n#             y=doc1.parent_account\n#         else:\n#             y=\" \"\n#         doc.append(\"accounts_details\", \n#         {\n#                         \"account\":final_comp_earning_account[x],\n#                         \"amount\":final_comp_earning_value[x],\n#                         \"credit\":float(final_comp_earning_credit[x]),\n#                         \"parent_account\":y\n#         }),    \n    \n    \n#     for x in range(0,len(final_comp_dedc_account)):\n#         doc1=frappe.get_doc(\"Account\",final_comp_dedc_account[x])\n#         if doc1.parent_account:\n#             y=doc1.parent_account\n#         else:\n#             y=\" \"\n        \n#         doc.append(\"accounts_details\", \n#         {\n#                         \"account\":final_comp_dedc_account[x],\n#                         \"amount\":final_comp_dedc_value[x],\n#                         \"credit\":float(final_comp_dedc_credit[x]),\n#                         \"parent_account\":y\n#         }), \n        \n# doc.absent_and_lop=float(doc.leave_without_pay)+float(doc.absent_days)\n\n        \n# frappe.msgprint(str(doc.name))\n\n# j = frappe.db.get_list('Journal Entry', filters={\n#     'process_payroll': doc.process_payroll\n# },\n# fields=['name']\n# )\n\n# if j:\n#     journal_entry_name = j[0]['name']\n#     frappe.msgprint(\"Journal Entry name: \" + journal_entry_name)\n    \n    \n    \n    \n# else:\n#     frappe.msgprint(\"No Journal Entry found with the given process_payroll value.\")\n\n\n\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n\n         \n     \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-08-23 15:46:01.149779",
  "module": null,
  "name": "After Save",
  "reference_doctype": "Account",
  "script": "if doc.employee:\n    doc1=frappe.get_doc(\"Employee\",doc.employee)\n    # frappe.msgprint(doc1.name)\n    doc1.salary_payable=doc.name\n    doc1.save()\n    \nif doc.emplyee1:\n    doc2=frappe.get_doc(\"Employee\",doc.emplyee1)\n    # frappe.msgprint(doc2.name)\n    doc2.pf_payable=doc.name\n    doc2.save()\n    \nif doc.employee3:\n    doc2=frappe.get_doc(\"Employee\",doc.employee3)\n    # frappe.msgprint(doc2.name)\n    doc2.esi_payable=doc.name\n    doc2.save()\n    \nif doc.employee4:\n    doc2=frappe.get_doc(\"Employee\",doc.employee4)\n    # frappe.msgprint(doc2.name)\n    doc2.pt_payable=doc.name\n    doc2.save()\n    \nif doc.employee5:\n    doc22=frappe.get_doc(\"Employee\",doc.employee5)\n    # frappe.msgprint(doc2.advance_payable)\n    doc22.advance_payable=doc.name\n    doc22.save()\n    \nif doc.employee_6:\n    doc22=frappe.get_doc(\"Employee\",doc.employee_6)\n    # frappe.msgprint(doc2.advance_payable)\n    doc22.tds_payable=doc.name\n    doc22.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-10-16 15:16:53.107433",
  "module": null,
  "name": "Payroll Process",
  "reference_doctype": "Payroll Process",
  "script": "if doc.full_and_final_settlement==1:\n    if len(doc.payroll_entry_child)>0:\n        for j in doc.payroll_entry_child:\n            \n            # frappe.msgprint(str(j.employee_id))\n            \n            for x in frappe.db.get_list('Salary Structure', \n                filters={'employee': j.employee_id,\"docstatus\":1},\n                fields= ['name'],\n                order_by='creation DESC',\n                limit_start= 0,\n                limit_page_length= 1,\n                ):\n                \n                doc1 = frappe.get_doc('Salary Structure', x.name)\n                doc1.payroll_frequency = 'Daily'\n                doc1.save()\n                \n                \n                # frappe.msgprint(str(x.name))\n                \n            \n            \n           \n            ",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-08-23 17:12:34.497187",
  "module": null,
  "name": "Salary Structure",
  "reference_doctype": "Salary Structure",
  "script": "\n# frappe.msgprint(str(doc.from_date))\n\ndoc = frappe.get_doc({\n    'doctype': 'Salary Structure Assignment',\n    'employee':doc.employee ,\n    'department': doc.department,\n    'designation': doc.designation,\n    'salary_structure': doc.name,\n    'from_date':doc.from_date,\n    'company': 'Lamit',\n    'payroll_payable_account': \"Payroll Payable - LR\",\n    'base':doc.monthly_salary ,\n    \n})\n\n# Save the document to the database\ndoc.insert()\n\n# # Submit the document\ndoc.submit()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "create_journal_entry",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-24 14:15:51.115061",
  "module": null,
  "name": "create_journal_entry",
  "reference_doctype": null,
  "script": "credit=[]\ndebit=[]\naccount=[]\n\npayroll1 = frappe.form_dict.payroll\n# frappe.msgprint(str(payroll1))\n\nfor x in frappe.db.get_list('Salary Slip', filters={'process_payroll': payroll1}):\n    doc1 = frappe.get_doc(\"Salary Slip\", x.name)\n    for m in doc1.accounts_details:\n        \n        account.append(m.account)\n        \n        credit.append(m.credit)\n        \n        debit.append(m.debit)\n        \n        # modified_credit_array = [int(element) if element is not None else 0 for element in credit]\n        # modified_debit_array = [int(element) if element is not None else 0 for element in debit]\n        \n        credit_new = [x if x is not None else '0' for x in credit]\n        debit_new = [x if x is not None else '0' for x in debit]\n        \n        # frappe.msgprint(str(credit_new))\n        # frappe.msgprint(str(debit_new))\n        # frappe.msgprint(str(modified_credit_array))\n    \n        \n\n\n    \n    \ndoc2 = frappe.get_doc({'doctype':\"Journal Entry\",'voucher_type':\"Journal Entry\"})\ndoc2.company=\"Lamit\"\ndoc2.posting_date=frappe.utils.nowdate()\ndoc2.process_payroll=payroll1\n    \nfor x in range(len(account)):\n    # frappe.msgprint(str(len(doc1.accounts_details)))\n    \n    doc2_child1 = doc2.append(\"accounts\", {})\n    doc2_child1.account = account[x]\n    if x < len(credit_new):\n        # Credit the account with the amount from test1 if available\n        doc2_child1.credit_in_account_currency = credit_new[x]\n    if x < len(debit_new):\n        # Debit the account with the amount from test2 if available\n        doc2_child1.debit_in_account_currency = debit_new[x]\n        doc2_child1.cost_center=\"Main - LR\"\n\ndoc2.insert()\n\n\ndoc11 = frappe.get_doc('Payroll Process',payroll1)\ndoc11.create_journal =1\ndoc11.save()",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "create_bank_entry",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-24 14:14:22.496445",
  "module": null,
  "name": "create_bank_entry",
  "reference_doctype": null,
  "script": "account=[];\ncredit=[];\nbank=[];\ndebit=[];\n\npayroll1 = frappe.form_dict.payroll\n# frappe.frappe.msgprint(payroll1)\n\nfor x in frappe.db.get_list('Salary Slip', filters={'process_payroll': payroll1}):\n    doc1 = frappe.get_doc(\"Salary Slip\", x.name)\n    \n    # bank.append(doc1.bank_account)\n    # unique_bank = list(set(bank))\n   \n    # frappe.msgprint(str(doc1.bank_account))\n    for m in doc1.accounts_details:\n        if m.check==1:\n            # frappe.msgprint(str(m.account))\n            # frappe.msgprint(str(m.credit))\n            account.append(m.account)\n           \n            credit.append(m.credit)\n            \n# frappe.msgprint(str(account))\naccount.append(doc1.bank)\n\n# frappe.msgprint(str(account))\n\ncredit_dict = {acc: value for acc, value in zip(account, credit)}\n\n# Create a new_credit list with '0' for missing accounts\nnew_credit = [credit_dict.get(acc, '0') for acc in account]\n\n\n# credit_float = [int(c) for c in new_credit]  # Convert strings to integers\n\n# total_sum = sum(new_credit)\n\n\ntotal_sum = sum([float(value) for value in new_credit])\ndebit.append(total_sum)\n# # frappe.msgprint(str(debit))\n\nnew_debit1 = [0] * (len(account) - len(debit)) + debit\n\n# frappe.msgprint(str(new_credit))\n# frappe.msgprint(str(account))\n# frappe.msgprint(str(new_debit1))\n\n\n\n\n\n\n\n\ndoc2 = frappe.get_doc({'doctype':\"Journal Entry\",'voucher_type':\"Journal Entry\"})\ndoc2.company=\"Lamit\"\ndoc2.posting_date=frappe.utils.nowdate()\ndoc2.process_payroll=payroll1\ndoc2.voucher_type=\"Bank Entry\"\n    \n\n    \nfor x in range(len(account)):\n    # frappe.msgprint(str(len(doc1.accounts_details)))\n    \n    doc2_child1 = doc2.append(\"accounts\", {})\n    doc2_child1.account = account[x]\n    if x < len(new_debit1):\n        # Credit the account with the amount from test1 if available\n        doc2_child1.credit_in_account_currency = new_debit1[x]\n    if x < len(new_credit):\n        # Debit the account with the amount from test2 if available\n        doc2_child1.debit_in_account_currency = new_credit[x]\n\ndoc2.insert()\n\n\ndoc11 = frappe.get_doc('Payroll Process',payroll1)\ndoc11.make_bank_entry =1\ndoc11.save()\n\n\n\n\n   ",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2023-08-24 14:45:56.506885",
  "module": null,
  "name": "Journal",
  "reference_doctype": "Journal Entry",
  "script": "if doc.process_payroll:\n    # Assuming doc.process_payroll is a valid date in the format \"YYYY-MM-DD\"\n    for x in frappe.db.get_list('Salary Slip', filters={'name':doc.process_payroll}):\n        doc1 = frappe.get_doc(\"Salary Slip\", x.name)\n        # frappe.msgprint(str(doc1.name))  # Just for debugging purposes\n\n        # Update the docstatus to '1' (Submitted)\n        doc1.docstatus = 1\n\n        # Save and submit the document\n        doc1.save()\n        doc1.submit()\n\n    frappe.msgprint('Salary Slips submitted successfully.')",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-08-24 16:18:25.163799",
  "module": null,
  "name": "Promotion",
  "reference_doctype": "Promotion",
  "script": "component=[]\namount=[]\ndays=[]\nformula=[]\ncondition=[]\n\ndeduct_components=[]\ndeduct_amount=[]\ndeduct_condition=[]\ndeduct_formula=[]\n\n\n\n\nif doc.select_employee:\n    \n    \n    \n    if doc.status==\"Approved\":\n        # frappe.msgprint(str(doc.status))\n        \n        \n    \n    \n    \n    \n        if doc.category==\"Grade\":\n            doc1 = frappe.get_doc('Employee', doc.select_employee)\n            \n            # frappe.msgprint(doc.promotion_child[0].new)\n                # frappe.msgprint(t.new)\n                \n            doc1.grade =doc.promotion_child[0].new\n            doc1.save()\n            \n            frappe.msgprint(\"Grade Updated Successfully\")\n            \n            \n        elif doc.category==\"Department\":\n            doc1 = frappe.get_doc('Employee', doc.select_employee)\n            \n            # frappe.msgprint(doc.promotion_child[0].new)\n                # frappe.msgprint(t.new)\n                \n            doc1.department =doc.promotion_child[0].new\n            doc1.save()\n            \n            frappe.msgprint(\"Department Updated Successfully\")\n            \n            \n            \n        elif doc.category==\"Designation\":\n            doc1 = frappe.get_doc('Employee', doc.select_employee)\n            \n            # frappe.msgprint(doc.promotion_child[0].new)\n                # frappe.msgprint(t.new)\n                \n            doc1.designation =doc.promotion_child[0].new\n            doc1.role_profile =doc.promotion_child[0].new\n            doc1.module_profile =doc.promotion_child[0].new\n            doc1.save()\n            \n            \n            frappe.msgprint(\"Designation Updated Successfully\")\n            \n           \n        \n        \n        elif doc.category == \"Salary\":\n            if len(doc.earnings) > 0:\n                for j in doc.earnings:\n                    component.append(j.salary_component)\n                    amount.append(j.amount1)\n                    days.append(j.per_working_day)\n                    formula.append(j.formula)\n        \n                for k in doc.deductions:\n                    deduct_components.append(k.salary_component)\n                    deduct_amount.append(k.amount)\n                    deduct_condition.append(k.condition)\n                    deduct_formula.append(k.formula)\n        \n                if not frappe.db.exists(\"Salary Structure\", {\"name\": doc.salary_structure_name,\"status\":\"Submitted\"}):\n                    doc2 = frappe.get_doc({'doctype': \"Salary Structure\"})\n                    doc2.company = \"Lamit\"\n                    doc2.payroll_frequency = \"Monthly\"\n                    doc2.employee = doc.select_employee\n                    doc2.from_date = doc.effective_from\n                    doc2.monthly_salary = doc.monthly_salary\n                    doc2.name = doc.salary_structure_name\n        \n                    for x in range(len(component)):\n                        doc2_child1 = doc2.append(\"earnings\", {})\n                        doc2_child1.salary_component = component[x]\n                        doc2_child1.amount = amount[x]\n                        doc2_child1.amount1 = amount[x]\n                        doc2_child1.per_working_day = days[x]\n                        doc2_child1.formula = formula[x]  # Set the formula here\n        \n                    for x in range(len(deduct_components)):\n                        doc2_child2 = doc2.append(\"deductions\", {})\n                        doc2_child2.salary_component = deduct_components[x]\n                        doc2_child2.amount = deduct_amount[x]\n                        doc2_child2.amount1 = deduct_amount[x]\n                        doc2_child2.formula = deduct_formula[x]  # Set the formula here\n                        doc2_child2.condition = deduct_condition[x]  # Set the condition here\n        \n                    doc2.insert()\n                    doc2.submit()\n                    frappe.msgprint(\"Salary Structure Created Successfully\")\n    \n            else:\n                frappe.msgprint(\"A salary structure with this name already exists. Please choose another name.\")\n\n            \n                \n                \n                \n            \n    \n        \n    ",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save (Submitted Document)",
  "event_frequency": "All",
  "modified": "2023-08-30 14:39:47.984993",
  "module": null,
  "name": "Leave Allocation",
  "reference_doctype": "Leave Allocation",
  "script": "if doc.taken_leave:\n    # frappe.msgprint(str(doc.taken_leave))\n    doc.balance_leave=float(doc.total_leaves_allocated)-float(doc.taken_leave)\n    \n    ",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Cancel",
  "event_frequency": "All",
  "modified": "2023-08-30 14:40:08.923919",
  "module": null,
  "name": "Leave Allocation1",
  "reference_doctype": "Leave Allocation",
  "script": "if not doc.taken_leave:\n    \n    doc.balance_leave=doc.total_leaves_allocated\n    \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2023-09-01 16:09:05.546259",
  "module": null,
  "name": "Leave Application before submit",
  "reference_doctype": "Leave Application",
  "script": "if doc.employee:\n    if doc.leave_type!=\"Leave Without Pay\":\n        balance_leave=doc.leave_balance\n        leave=doc.total_leave_days\n        total=float(balance_leave)-float(leave)\n        \n        g=frappe.db.get_list('Leave Allocation',\n        \n        filters={\n            \n            'employee':doc.employee,\n            'leave_type':doc.leave_type\n        },\n        fields=['name'],\n        \n        )\n        \n        id1=g[0].name\n        \n        \n        doc1 = frappe.get_doc('Leave Allocation',id1)\n        # frappe.msgprint(str(doc1.taken_leave))\n        \n        \n        if doc1.taken_leave==\" \" or doc1.taken_leave==None:\n           \n            doc1.taken_leave=leave\n            \n            \n        else:\n            total=float(doc1.taken_leave)+float(leave)\n            doc1.taken_leave=total\n            \n            \n            \n       \n        \n        \n        doc1.save()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-09-01 16:29:17.407351",
  "module": null,
  "name": "Leave Application before save",
  "reference_doctype": "Leave Application",
  "script": "\n\nf=frappe.db.get_list('Employee',\n    filters={\n        'designation': \"HR Manager\"\n    },\n    fields=['name','user_id'],\n    \n    )\n    # frappe.msgprint(str(f[0].area_sales_manager_email))\ndoc.hr_email=f[0].user_id",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "sales_officer_update",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-09-23 15:55:18.614543",
  "module": null,
  "name": "Sales Officer Update",
  "reference_doctype": null,
  "script": "\nn=[]\ncompany1=frappe.form_dict.company\nemployee1=frappe.form_dict.employee\nemployee_name1=frappe.form_dict.employee_name\nemployee_email1=frappe.form_dict.employee_email\n\n\nif employee_email1:\n    area=frappe.db.get_list('Assign Sale Area',\n        filters={\n            'company': company1\n        },\n        fields=['*'],\n        \n    )\n    \n    \n    \n    if area[0].sales_officer_email:\n        user=frappe.db.get_list('User Permission',\n        filters={\n            \n            'user': area[0].sales_officer_email,\n            'allow': ['in', [\"Assign Sale Area\", \"Super Stockist\"]],\n            'company':company1\n            \n            \n        },\n        fields=['*']\n        \n        \n        \n    )\n        if len(user)>0:\n            # frappe.msgprint(str(len(user)))\n            for k in user:\n               \n                # frappe.msgprint(str(k.name))\n                frappe.delete_doc(\"User Permission\",k.name)\n                \n                \n    \n    \n    for m in area:\n        n.append(m.name)\n       \n        \n        doc1 = frappe.get_doc('Assign Sale Area', m.name)\n        doc1.sales_officer_name = employee_name1\n        doc1.sales_officer=employee1\n        doc1.sales_officer1=employee1\n        doc1.sales_officer_email=employee_email1\n        \n        \n        doc1.save()\n        \n    \n    # frappe.msgprint(str(company1))\n    for c in n:\n        doc = frappe.get_doc({\n        'doctype': 'User Permission',\n        'user':employee_email1 ,\n        'allow':\"Assign Sale Area\",\n        'for_value':c,\n        'company':company1,\n        })\n        doc.insert()\n        \n    # n=[];\n           \n        \n    doc = frappe.get_doc({\n    'doctype': 'User Permission',\n    'user': employee_email1,\n    'allow':\"Super Stockist\",\n    'for_value':company1,\n    'user_designation':\"Sales Officer\",\n    'user_fullname':employee_name1,\n    'user_employee_id':employee1,\n    'company':company1,\n    })\n    doc.insert() \n    \n    \n    frappe.msgprint(\"Sales Officer Updated Successfully\")\n    \n        \nelse:\n    frappe.msgprint(\"Please Set Email ID in Employee\")\n        \n    \n    \n\n\n\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "marketing_officer_update",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-09-23 15:56:46.294725",
  "module": null,
  "name": "Marketing Officer Update",
  "reference_doctype": null,
  "script": "\nn=[]\ncompany1=frappe.form_dict.company\nemployee1=frappe.form_dict.employee\nemployee_name1=frappe.form_dict.employee_name\nemployee_email1=frappe.form_dict.employee_email\n\n\nif employee_email1:\n    area=frappe.db.get_list('Assign Sale Area',\n        filters={\n            'company': company1\n        },\n        fields=['*'],\n        \n    )\n    \n    \n    \n    if area[0].marketing_officer_email:\n        user=frappe.db.get_list('User Permission',\n        filters={\n            'user': area[0].marketing_officer_email,\n            'allow': ['in', [\"Assign Sale Area\", \"Super Stockist\"]],\n            'company':company1\n            \n            \n        },\n        fields=['*']\n        \n        \n        \n    )\n        if len(user)>0:\n            # frappe.msgprint(str(len(user)))\n            for k in user:\n               \n                # frappe.msgprint(str(k.name))\n                frappe.delete_doc(\"User Permission\",k.name)\n                \n                \n    \n    \n    for m in area:\n        n.append(m.name)\n       \n        \n        doc1 = frappe.get_doc('Assign Sale Area', m.name)\n        doc1.marketing_officer_name = employee_name1\n        doc1.marketing_officer=employee1\n        doc1.marketing_officer1=employee1\n        doc1.marketing_officer_email=employee_email1\n        \n        \n        doc1.save()\n        \n    \n    \n    for c in n:\n        doc = frappe.get_doc({\n        'doctype': 'User Permission',\n        'user':employee_email1 ,\n        'allow':\"Assign Sale Area\",\n        'for_value':c,\n        'company':company1,\n        })\n        doc.insert()\n        \n    # n=[]\n           \n        \n    doc = frappe.get_doc({\n    'doctype': 'User Permission',\n    'user': employee_email1,\n    'allow':\"Super Stockist\",\n    'for_value':company1,\n    'user_designation':\"Marketing Officer\",\n    'user_fullname':employee_name1,\n    'user_employee_id':employee1,\n    'company':company1,\n    })\n    doc.insert() \n    \n    frappe.msgprint(\"Markeing Officer Updated Successfully\")\n    \n        \nelse:\n    frappe.msgprint(\"Please Set Email ID in Employee\")\n        \n    \n    \n\n\n\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-10-12 11:11:44.419039",
  "module": null,
  "name": "testr2",
  "reference_doctype": "test",
  "script": "# frappe.msgprint(\"KL\")\n\n# t=frappe.get_all('Employee',\n#     filters={\n#         'company': 'Lamit',\n       \n#     },\n   \n    \n# )\n# # frappe.msgprint(str(t))\n\n# for i in t:\n#     frappe.msgprint(str(i.name))\n    # doc1 = frappe.get_doc('Employee', i.name)\n    # # doc1.esi_payable = None\n    # # doc1.save()\n    \n    # frappe.msgprint(doc1.esi_payable)\n    # if(doc1.esi_payable):\n    #     doc1.esi_payable = None\n    #     doc1.save()\n        \n        \nvalues_array = [\n    \"LG001\", \"LG433\", \"LG137\", \"LG570\", \"LG146\", \"LG002\", \"LG143\", \"LG134\",\n    \"LG657\", \"LG624\", \"LG402\", \"LG237\", \"LG743\", \"LG667\", \"LG259\", \"LG643\",\n    \"LG447\", \"LG760\", \"LG644\", \"LG789\", \"LG585\", \"LG635\", \"LG773\", \"LG791\",\n    \"LG704\", \"LG523\", \"LG770\", \"LG117\", \"LG009\", \"LG722\", \"LG723\", \"LG666\",\n    \"LG670\", \"LG705\", \"LG138\", \"LG780\", \"LG526\", \"LG633\", \"LG620\", \"LG816\",\n    \"LG819\", \"LG732\", \"LG105\", \"LG330\", \"LG317\", \"LG804\", \"LG677\", \"LG414\",\n    \"LG254\", \"LG623\", \"LG710\", \"LG711\", \"LG712\", \"LG786\", \"LG144\", \"LG646\",\n    \"LG253\", \"LG598\", \"LG610\", \"LG749\", \"LG206\", \"LG795\", \"LG785\", \"LG776\",\n    \"NR101\", \"KP101\", \"AL001\", \"PR001\", \"TC001\", \"RT001\", \"IS001\"\n]\n\nfor i in values_array:      \n        \n\n        \n    doc1 = frappe.get_doc('Employee', i)\n        # doc1.esi_payable = None\n        # doc1.save()\n        \n        # frappe.msgprint(doc1.esi_payable)\n       \n    doc1.esi_payable = None\n    doc1.save()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-10-13 16:21:11.502458",
  "module": null,
  "name": "Payroll Process After Save",
  "reference_doctype": "Payroll Process",
  "script": "year = doc.year\nmonth = doc.month\n\n# Get the month number from the map\nmonth_map = {\n    'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6,\n    'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12\n}\nmonth_number = month_map[month]\n\n# Format the start date (1st day of the month)\nstart_date = f\"{year}-{month_number:02d}-01\"\n\n# Calculate the last day of the month\nlast_day_of_month = 31 if month_number in {1, 3, 5, 7, 8, 10, 12} else 30 if month_number != 2 else 28\n\n# Format the end date (last day of the month)\nend_date = f\"{year}-{month_number:02d}-{last_day_of_month:02d}\"\n\n# Print the results\n# frappe.msgprint(start_date)\n# frappe.msgprint( end_date)\n\n\nif len(doc.payroll_entry_child):\n    # frappe.msgprint(\"KL\")\n    \n    \n    \n    if doc.full_and_final_settlement==1:\n        for i in doc.payroll_entry_child:\n            doc1 = frappe.new_doc('Salary Slip')\n            doc1.employee = i.employee_id\n            doc1.employee_name=i.employee\n            doc1.posting_date=doc.posting_date\n            doc1.year2=doc.year\n            doc1.month1=doc.month\n            doc1.company=\"Lamit\"\n            doc1.currency=\"INR\"\n            doc1.payroll_frequency=\"Daily\"\n            doc1.process_payroll=doc.payroll_name\n            doc1.bank=doc.payroll_payable\n            doc1.f_and_f1=1\n            doc1.start_date=doc.settlement_start_date\n            doc1.end_date=doc.settlement_end_date\n            \n            doc1.insert()\n            \n            \n            \n    else:\n        for i in doc.payroll_entry_child:\n            \n            doc1 = frappe.new_doc('Salary Slip')\n            doc1.employee = i.employee_id\n            doc1.employee_name=i.employee\n            doc1.posting_date=doc.posting_date\n            doc1.year2=doc.year\n            doc1.month1=doc.month\n            doc1.company=\"Lamit\"\n            doc1.currency=\"INR\"\n            doc1.payroll_frequency=\"Monthly\"\n            doc1.process_payroll=doc.payroll_name\n            doc1.bank=doc.payroll_payable\n            # doc1.f_and_f1=1\n            doc1.start_date=start_date\n            doc1.end_date=end_date\n            \n            doc1.insert()\n            \n            \n           \n            \n           \n        \n    \n    \n    \n    \n    \n    \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Delete",
  "event_frequency": "All",
  "modified": "2023-10-16 15:18:55.441802",
  "module": null,
  "name": "After Delete",
  "reference_doctype": "Payroll Process",
  "script": "lead_list = frappe.get_list(\"Salary Slip\", filters={\"process_payroll\":doc.name})\n\n    # Set the status field options in another field\nfor lead in lead_list:\n    frappe.delete_doc('Salary Slip', lead.name)\n    # frappe.msgprint(str(lead.name))\n    # doc = frappe.get_doc(\"Salary Structure\", lead.name)\n    # doc.enable=1\n    # doc.save()\n",
  "script_type": "DocType Event"
 }
]